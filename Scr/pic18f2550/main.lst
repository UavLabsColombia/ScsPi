CCS PCH C Compiler, Version 5.015, 5967               23-nov.-17 16:24

               Filename:   C:\Users\Andres\Documents\GitHub\ScsPi\Scr\pic18f2550\main.lst

               ROM used:   1564 bytes (5%)
                           Largest free fragment is 31200
               RAM used:   29 (1%) at main() level
                           64 (3%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   04FC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   00D4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Convertidor de Analogo a Digital 
.................... #include <18F2550.h> 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
*
010A:  MOVLW  8E
010C:  MOVWF  00
010E:  MOVFF  26,01
0112:  MOVFF  25,02
0116:  CLRF   03
0118:  MOVF   01,F
011A:  BNZ   012E
011C:  MOVFF  02,01
0120:  CLRF   02
0122:  MOVLW  08
0124:  SUBWF  00,F
0126:  MOVF   01,F
0128:  BNZ   012E
012A:  CLRF   00
012C:  BRA    013E
012E:  BCF    FD8.0
0130:  BTFSC  01.7
0132:  BRA    013C
0134:  RLCF   02,F
0136:  RLCF   01,F
0138:  DECF   00,F
013A:  BRA    012E
013C:  BCF    01.7
013E:  GOTO   0586 (RETURN)
0142:  MOVF   32,W
0144:  BTFSC  FD8.2
0146:  BRA    022A
0148:  MOVWF  00
014A:  MOVF   36,W
014C:  BTFSC  FD8.2
014E:  BRA    022A
0150:  ADDWF  00,F
0152:  BNC   015C
0154:  MOVLW  81
0156:  ADDWF  00,F
0158:  BC    022A
015A:  BRA    0164
015C:  MOVLW  7F
015E:  SUBWF  00,F
0160:  BNC   022A
0162:  BZ    022A
0164:  MOVFF  33,3A
0168:  MOVF   37,W
016A:  XORWF  3A,F
016C:  BSF    33.7
016E:  BSF    37.7
0170:  MOVF   35,W
0172:  MULWF  39
0174:  MOVFF  FF4,3C
0178:  MOVF   34,W
017A:  MULWF  38
017C:  MOVFF  FF4,03
0180:  MOVFF  FF3,3B
0184:  MULWF  39
0186:  MOVF   FF3,W
0188:  ADDWF  3C,F
018A:  MOVF   FF4,W
018C:  ADDWFC 3B,F
018E:  MOVLW  00
0190:  ADDWFC 03,F
0192:  MOVF   35,W
0194:  MULWF  38
0196:  MOVF   FF3,W
0198:  ADDWF  3C,F
019A:  MOVF   FF4,W
019C:  ADDWFC 3B,F
019E:  MOVLW  00
01A0:  CLRF   02
01A2:  ADDWFC 03,F
01A4:  ADDWFC 02,F
01A6:  MOVF   33,W
01A8:  MULWF  39
01AA:  MOVF   FF3,W
01AC:  ADDWF  3B,F
01AE:  MOVF   FF4,W
01B0:  ADDWFC 03,F
01B2:  MOVLW  00
01B4:  ADDWFC 02,F
01B6:  MOVF   33,W
01B8:  MULWF  38
01BA:  MOVF   FF3,W
01BC:  ADDWF  03,F
01BE:  MOVF   FF4,W
01C0:  ADDWFC 02,F
01C2:  MOVLW  00
01C4:  CLRF   01
01C6:  ADDWFC 01,F
01C8:  MOVF   35,W
01CA:  MULWF  37
01CC:  MOVF   FF3,W
01CE:  ADDWF  3B,F
01D0:  MOVF   FF4,W
01D2:  ADDWFC 03,F
01D4:  MOVLW  00
01D6:  ADDWFC 02,F
01D8:  ADDWFC 01,F
01DA:  MOVF   34,W
01DC:  MULWF  37
01DE:  MOVF   FF3,W
01E0:  ADDWF  03,F
01E2:  MOVF   FF4,W
01E4:  ADDWFC 02,F
01E6:  MOVLW  00
01E8:  ADDWFC 01,F
01EA:  MOVF   33,W
01EC:  MULWF  37
01EE:  MOVF   FF3,W
01F0:  ADDWF  02,F
01F2:  MOVF   FF4,W
01F4:  ADDWFC 01,F
01F6:  INCF   00,F
01F8:  BTFSC  01.7
01FA:  BRA    0206
01FC:  RLCF   3B,F
01FE:  RLCF   03,F
0200:  RLCF   02,F
0202:  RLCF   01,F
0204:  DECF   00,F
0206:  MOVLW  00
0208:  BTFSS  3B.7
020A:  BRA    0220
020C:  INCF   03,F
020E:  ADDWFC 02,F
0210:  ADDWFC 01,F
0212:  MOVF   01,W
0214:  BNZ   0220
0216:  MOVF   02,W
0218:  BNZ   0220
021A:  MOVF   03,W
021C:  BNZ   0220
021E:  INCF   00,F
0220:  BTFSC  3A.7
0222:  BSF    01.7
0224:  BTFSS  3A.7
0226:  BCF    01.7
0228:  BRA    0232
022A:  CLRF   00
022C:  CLRF   01
022E:  CLRF   02
0230:  CLRF   03
0232:  RETURN 0
0234:  MOVFF  26,2D
0238:  MOVF   2A,W
023A:  XORWF  2D,F
023C:  BTFSS  2D.7
023E:  BRA    024A
0240:  BCF    FD8.2
0242:  BCF    FD8.0
0244:  BTFSC  26.7
0246:  BSF    FD8.0
0248:  BRA    02A8
024A:  MOVFF  26,2D
024E:  MOVFF  29,2E
0252:  MOVF   25,W
0254:  SUBWF  2E,F
0256:  BZ    0264
0258:  BTFSS  2D.7
025A:  BRA    02A8
025C:  MOVF   FD8,W
025E:  XORLW  01
0260:  MOVWF  FD8
0262:  BRA    02A8
0264:  MOVFF  2A,2E
0268:  MOVF   26,W
026A:  SUBWF  2E,F
026C:  BZ    027A
026E:  BTFSS  2D.7
0270:  BRA    02A8
0272:  MOVF   FD8,W
0274:  XORLW  01
0276:  MOVWF  FD8
0278:  BRA    02A8
027A:  MOVFF  2B,2E
027E:  MOVF   27,W
0280:  SUBWF  2E,F
0282:  BZ    0290
0284:  BTFSS  2D.7
0286:  BRA    02A8
0288:  MOVF   FD8,W
028A:  XORLW  01
028C:  MOVWF  FD8
028E:  BRA    02A8
0290:  MOVFF  2C,2E
0294:  MOVF   28,W
0296:  SUBWF  2E,F
0298:  BZ    02A6
029A:  BTFSS  2D.7
029C:  BRA    02A8
029E:  MOVF   FD8,W
02A0:  XORLW  01
02A2:  MOVWF  FD8
02A4:  BRA    02A8
02A6:  BCF    FD8.0
02A8:  GOTO   05D4 (RETURN)
02AC:  MOVF   32,W
02AE:  SUBLW  B6
02B0:  MOVWF  32
02B2:  CLRF   03
02B4:  MOVFF  33,36
02B8:  BSF    33.7
02BA:  BCF    FD8.0
02BC:  RRCF   33,F
02BE:  RRCF   34,F
02C0:  RRCF   35,F
02C2:  RRCF   03,F
02C4:  RRCF   02,F
02C6:  RRCF   01,F
02C8:  RRCF   00,F
02CA:  DECFSZ 32,F
02CC:  BRA    02BA
02CE:  BTFSS  36.7
02D0:  BRA    02E8
02D2:  COMF   00,F
02D4:  COMF   01,F
02D6:  COMF   02,F
02D8:  COMF   03,F
02DA:  INCF   00,F
02DC:  BTFSC  FD8.2
02DE:  INCF   01,F
02E0:  BTFSC  FD8.2
02E2:  INCF   02,F
02E4:  BTFSC  FD8.2
02E6:  INCF   03,F
02E8:  GOTO   03C8 (RETURN)
02EC:  BTFSC  FD8.1
02EE:  BRA    02F6
02F0:  CLRF   FEA
02F2:  MOVLW  3A
02F4:  MOVWF  FE9
02F6:  CLRF   00
02F8:  CLRF   01
02FA:  CLRF   02
02FC:  CLRF   03
02FE:  CLRF   3A
0300:  CLRF   3B
0302:  CLRF   3C
0304:  CLRF   3D
0306:  MOVF   39,W
0308:  IORWF  38,W
030A:  IORWF  37,W
030C:  IORWF  36,W
030E:  BZ    0368
0310:  MOVLW  20
0312:  MOVWF  3E
0314:  BCF    FD8.0
0316:  RLCF   32,F
0318:  RLCF   33,F
031A:  RLCF   34,F
031C:  RLCF   35,F
031E:  RLCF   3A,F
0320:  RLCF   3B,F
0322:  RLCF   3C,F
0324:  RLCF   3D,F
0326:  MOVF   39,W
0328:  SUBWF  3D,W
032A:  BNZ   033C
032C:  MOVF   38,W
032E:  SUBWF  3C,W
0330:  BNZ   033C
0332:  MOVF   37,W
0334:  SUBWF  3B,W
0336:  BNZ   033C
0338:  MOVF   36,W
033A:  SUBWF  3A,W
033C:  BNC   035C
033E:  MOVF   36,W
0340:  SUBWF  3A,F
0342:  MOVF   37,W
0344:  BTFSS  FD8.0
0346:  INCFSZ 37,W
0348:  SUBWF  3B,F
034A:  MOVF   38,W
034C:  BTFSS  FD8.0
034E:  INCFSZ 38,W
0350:  SUBWF  3C,F
0352:  MOVF   39,W
0354:  BTFSS  FD8.0
0356:  INCFSZ 39,W
0358:  SUBWF  3D,F
035A:  BSF    FD8.0
035C:  RLCF   00,F
035E:  RLCF   01,F
0360:  RLCF   02,F
0362:  RLCF   03,F
0364:  DECFSZ 3E,F
0366:  BRA    0314
0368:  MOVFF  3A,FEF
036C:  MOVFF  3B,FEC
0370:  MOVFF  3C,FEC
0374:  MOVFF  3D,FEC
0378:  RETURN 0
037A:  MOVF   FE9,W
037C:  MOVWF  2A
037E:  MOVF   29,W
0380:  MOVWF  2C
0382:  BZ    03B6
0384:  MOVFF  28,35
0388:  MOVFF  27,34
038C:  MOVFF  26,33
0390:  MOVFF  25,32
0394:  CLRF   39
0396:  CLRF   38
0398:  MOVLW  20
039A:  MOVWF  37
039C:  MOVLW  82
039E:  MOVWF  36
03A0:  RCALL  0142
03A2:  MOVFF  03,28
03A6:  MOVFF  02,27
03AA:  MOVFF  01,26
03AE:  MOVFF  00,25
03B2:  DECFSZ 2C,F
03B4:  BRA    0384
03B6:  MOVFF  28,35
03BA:  MOVFF  27,34
03BE:  MOVFF  26,33
03C2:  MOVFF  25,32
03C6:  BRA    02AC
03C8:  MOVFF  03,28
03CC:  MOVFF  02,27
03D0:  MOVFF  01,26
03D4:  MOVFF  00,25
03D8:  BTFSS  28.7
03DA:  BRA    03F6
03DC:  DECF   2A,F
03DE:  BSF    2A.5
03E0:  COMF   25,F
03E2:  COMF   26,F
03E4:  COMF   27,F
03E6:  COMF   28,F
03E8:  INCF   25,F
03EA:  BTFSC  FD8.2
03EC:  INCF   26,F
03EE:  BTFSC  FD8.2
03F0:  INCF   27,F
03F2:  BTFSC  FD8.2
03F4:  INCF   28,F
03F6:  MOVLW  3B
03F8:  MOVWF  31
03FA:  MOVLW  9A
03FC:  MOVWF  30
03FE:  MOVLW  CA
0400:  MOVWF  2F
0402:  CLRF   2E
0404:  MOVLW  0A
0406:  MOVWF  2C
0408:  MOVF   29,W
040A:  BTFSC  FD8.2
040C:  INCF   2A,F
040E:  BSF    FD8.1
0410:  CLRF   FEA
0412:  MOVLW  25
0414:  MOVWF  FE9
0416:  MOVFF  28,35
041A:  MOVFF  27,34
041E:  MOVFF  26,33
0422:  MOVFF  25,32
0426:  MOVFF  31,39
042A:  MOVFF  30,38
042E:  MOVFF  2F,37
0432:  MOVFF  2E,36
0436:  RCALL  02EC
0438:  MOVF   01,W
043A:  MOVF   00,F
043C:  BNZ   045C
043E:  INCF   29,W
0440:  SUBWF  2C,W
0442:  BZ    045C
0444:  MOVF   2A,W
0446:  BZ    0460
0448:  ANDLW  0F
044A:  SUBWF  2C,W
044C:  BZ    0450
044E:  BC    04C6
0450:  BTFSC  2A.7
0452:  BRA    04C6
0454:  BTFSC  2A.6
0456:  BRA    0460
0458:  MOVLW  20
045A:  BRA    04BC
045C:  MOVLW  20
045E:  ANDWF  2A,F
0460:  BTFSS  2A.5
0462:  BRA    047E
0464:  BCF    2A.5
0466:  MOVF   29,W
0468:  BTFSS  FD8.2
046A:  DECF   2A,F
046C:  MOVF   00,W
046E:  MOVWF  2A
0470:  MOVLW  2D
0472:  BTFSS  F9E.4
0474:  BRA    0472
0476:  MOVWF  FAD
0478:  MOVF   2A,W
047A:  MOVWF  00
047C:  CLRF   2A
047E:  MOVF   29,W
0480:  SUBWF  2C,W
0482:  BNZ   049A
0484:  MOVF   00,W
0486:  MOVWF  2A
0488:  MOVLW  2E
048A:  BTFSS  F9E.4
048C:  BRA    048A
048E:  MOVWF  FAD
0490:  MOVF   2A,W
0492:  MOVWF  00
0494:  MOVLW  20
0496:  ANDWF  2A,F
0498:  MOVLW  00
049A:  MOVLW  30
049C:  BTFSS  2A.5
049E:  BRA    04BC
04A0:  BCF    2A.5
04A2:  MOVF   29,W
04A4:  BTFSS  FD8.2
04A6:  DECF   2A,F
04A8:  MOVF   00,W
04AA:  MOVWF  2A
04AC:  MOVLW  2D
04AE:  BTFSS  F9E.4
04B0:  BRA    04AE
04B2:  MOVWF  FAD
04B4:  MOVF   2A,W
04B6:  MOVWF  00
04B8:  CLRF   2A
04BA:  MOVLW  30
04BC:  ADDWF  00,F
04BE:  MOVF   00,W
04C0:  BTFSS  F9E.4
04C2:  BRA    04C0
04C4:  MOVWF  FAD
04C6:  BCF    FD8.1
04C8:  MOVFF  31,35
04CC:  MOVFF  30,34
04D0:  MOVFF  2F,33
04D4:  MOVFF  2E,32
04D8:  CLRF   39
04DA:  CLRF   38
04DC:  CLRF   37
04DE:  MOVLW  0A
04E0:  MOVWF  36
04E2:  RCALL  02EC
04E4:  MOVFF  03,31
04E8:  MOVFF  02,30
04EC:  MOVFF  01,2F
04F0:  MOVFF  00,2E
04F4:  DECFSZ 2C,F
04F6:  BRA    040E
04F8:  GOTO   0614 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses xt, nowdt, noprotect, put, CPUDIV1 
.................... // Numero de bits a utilizar sobre el convertidor analogo 
.................... #device adc = 10 
.................... #use delay(internal = 8000000) 
*
00AE:  CLRF   FEA
00B0:  MOVLW  3F
00B2:  MOVWF  FE9
00B4:  MOVF   FEF,W
00B6:  BZ    00D2
00B8:  MOVLW  02
00BA:  MOVWF  01
00BC:  CLRF   00
00BE:  DECFSZ 00,F
00C0:  BRA    00BE
00C2:  DECFSZ 01,F
00C4:  BRA    00BC
00C6:  MOVLW  97
00C8:  MOVWF  00
00CA:  DECFSZ 00,F
00CC:  BRA    00CA
00CE:  DECFSZ FEF,F
00D0:  BRA    00B8
00D2:  RETURN 0
.................... #use rs232(baud = 9600, bits = 8, parity = N, xmit = PIN_C6, RCV = PIN_C7, stop=1, ERRORS) 
*
0096:  BTFSS  F9E.5
0098:  BRA    0096
009A:  MOVFF  FAB,17
009E:  MOVFF  FAE,01
00A2:  BTFSS  17.1
00A4:  BRA    00AA
00A6:  BCF    FAB.4
00A8:  BSF    FAB.4
00AA:  GOTO   00DA (RETURN)
....................  
.................... #use fast_io(b) 
.................... #use fast_io(a) 
....................  
.................... // Variables Globales 
.................... // calculo de la resulucion en la salida 
.................... float resolucion = (float)5 / (float)1023; 
.................... char dato_recibido = '0'; 
....................  
.................... // Se define el puerto ADC a utilizar y sus pines. 
.................... void define_puertos() { 
....................   // Define el puerto b como salida 
....................   set_tris_b(0x00); 
*
00EA:  MOVLW  00
00EC:  MOVWF  F93
....................    
....................   // define la entrada 0 del puerto a como entrada 
....................   set_tris_a(0b00000001); 
00EE:  MOVLW  01
00F0:  MOVWF  F92
....................  
....................   // Define como entradas analoga el puerto AN0 
....................   SETUP_ADC_PORTS(AN0); 
00F2:  MOVF   FC1,W
00F4:  ANDLW  C0
00F6:  IORLW  0E
00F8:  MOVWF  FC1
....................  
....................   // Define el relog interno para el uso del ADC 
....................   SETUP_ADC(ADC_CLOCK_INTERNAL); 
00FA:  MOVF   FC0,W
00FC:  ANDLW  C0
00FE:  IORLW  07
0100:  MOVWF  FC0
0102:  BSF    FC0.7
0104:  BSF    FC2.0
0106:  GOTO   0540 (RETURN)
.................... } 
....................  
.................... //interrumcion de llegada de datos 
.................... #int_rda 
.................... void rb_isr() 
.................... { 
....................    if(kbhit()) 
*
00D4:  BTFSS  F9E.5
00D6:  BRA    00E4
....................    { 
....................       dato_recibido = getc(); 
00D8:  BRA    0096
00DA:  MOVFF  01,1C
....................       delay_ms(4); 
00DE:  MOVLW  04
00E0:  MOVWF  3F
00E2:  RCALL  00AE
....................       //printf("ultimo dato recibido %c \n" getc()); 
....................    } 
00E4:  BCF    F9E.5
00E6:  GOTO   0054
.................... } 
....................  
....................  
....................  
.................... void main() { 
*
04FC:  CLRF   FF8
04FE:  BCF    FD0.7
0500:  BSF    07.7
0502:  MOVLW  70
0504:  MOVWF  FD3
0506:  MOVF   FD3,W
0508:  CLRF   17
050A:  BCF    FB8.3
050C:  MOVLW  0C
050E:  MOVWF  FAF
0510:  MOVLW  A2
0512:  MOVWF  FAC
0514:  MOVLW  90
0516:  MOVWF  FAB
0518:  MOVLW  0A
051A:  MOVWF  1B
051C:  MOVLW  28
051E:  MOVWF  1A
0520:  MOVLW  20
0522:  MOVWF  19
0524:  MOVLW  77
0526:  MOVWF  18
0528:  MOVLW  30
052A:  MOVWF  1C
052C:  MOVF   FC1,W
052E:  ANDLW  C0
0530:  IORLW  0F
0532:  MOVWF  FC1
0534:  MOVLW  07
0536:  MOVWF  FB4
....................    //habilita las interrupciones 
....................    enable_interrupts(int_rda); 
0538:  BSF    F9D.5
....................    enable_interrupts(global); 
053A:  MOVLW  C0
053C:  IORWF  FF2,F
....................     
....................   // configura los puertos 
....................   define_puertos(); 
053E:  BRA    00EA
....................  
....................   int16 Valor = 0; 
....................   float ValorADC = 0; 
0540:  CLRF   1E
0542:  CLRF   1D
0544:  CLRF   22
0546:  CLRF   21
0548:  CLRF   20
054A:  CLRF   1F
....................   SET_ADC_CHANNEL(0); 
054C:  MOVLW  00
054E:  MOVWF  01
0550:  MOVF   FC2,W
0552:  ANDLW  C3
0554:  IORWF  01,W
0556:  MOVWF  FC2
....................  
....................    int16 tempo = 0; 
0558:  CLRF   24
055A:  CLRF   23
055C:  CLRF   16
055E:  BTFSC  FF2.7
0560:  BSF    16.7
0562:  BCF    FF2.7
....................   while (true) { 
....................     delay_ms(5); 
0564:  MOVLW  05
0566:  MOVWF  3F
0568:  RCALL  00AE
056A:  BTFSC  16.7
056C:  BSF    FF2.7
....................     // Lee el puerto Analogo 
....................     Valor = READ_ADC(); 
056E:  BSF    FC2.1
0570:  BTFSC  FC2.1
0572:  BRA    0570
0574:  MOVFF  FC3,1D
0578:  MOVFF  FC4,1E
....................     // output_toggle(PIN_B1); 
....................     ValorADC = resolucion * (float)Valor; 
057C:  MOVFF  1E,26
0580:  MOVFF  1D,25
0584:  BRA    010A
0586:  MOVFF  1B,35
058A:  MOVFF  1A,34
058E:  MOVFF  19,33
0592:  MOVFF  18,32
0596:  MOVFF  03,39
059A:  MOVFF  02,38
059E:  MOVFF  01,37
05A2:  MOVFF  00,36
05A6:  RCALL  0142
05A8:  MOVFF  03,22
05AC:  MOVFF  02,21
05B0:  MOVFF  01,20
05B4:  MOVFF  00,1F
....................  
....................     if (ValorADC > 1.0f) { 
05B8:  CLRF   28
05BA:  CLRF   27
05BC:  CLRF   26
05BE:  MOVLW  7F
05C0:  MOVWF  25
05C2:  MOVFF  22,2C
05C6:  MOVFF  21,2B
05CA:  MOVFF  20,2A
05CE:  MOVFF  1F,29
05D2:  BRA    0234
05D4:  BNC   05DA
....................       output_high(PIN_B1); 
05D6:  BSF    F8A.1
....................       //delay_ms(500); 
....................     } else { 
05D8:  BRA    05DC
....................       output_low(PIN_B1); 
05DA:  BCF    F8A.1
....................       //delay_ms(500); 
....................     } 
....................      
....................     if(dato_recibido =='1'){ 
05DC:  MOVF   1C,W
05DE:  SUBLW  31
05E0:  BNZ   05E6
....................       output_high(PIN_B2); 
05E2:  BSF    F8A.2
....................     }else{ 
05E4:  BRA    05EC
....................       dato_recibido = '0'; 
05E6:  MOVLW  30
05E8:  MOVWF  1C
....................       output_low(PIN_B2); 
05EA:  BCF    F8A.2
....................     } 
....................  
....................     // 5ms * 200 = 1s 
....................     if(tempo == 200){ 
05EC:  MOVF   23,W
05EE:  SUBLW  C8
05F0:  BNZ   0616
05F2:  MOVF   24,F
05F4:  BNZ   0616
....................       tempo = 0; 
05F6:  CLRF   24
05F8:  CLRF   23
....................       //printf("%c.1111", dato_recibido); 
....................       printf("%1.4f", ValorADC); 
05FA:  MOVLW  89
05FC:  MOVWF  FE9
05FE:  MOVFF  22,28
0602:  MOVFF  21,27
0606:  MOVFF  20,26
060A:  MOVFF  1F,25
060E:  MOVLW  04
0610:  MOVWF  29
0612:  BRA    037A
....................       output_toggle(PIN_B1); 
0614:  BTG    F8A.1
....................     } 
....................     tempo ++; 
0616:  INCF   23,F
0618:  BTFSC  FD8.2
061A:  INCF   24,F
061C:  BRA    055C
....................   } 
.................... } 
061E:  SLEEP 

Configuration Fuses:
   Word  1: C827   PLL12 CPUDIV1 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
