CCS PCH C Compiler, Version 5.015, 5967               29-dic.-17 22:38

               Filename:   C:\Users\Andres\Documents\GitHub\ScsPi\Scr\pic18f2550new\main2.lst

               ROM used:   3710 bytes (11%)
                           Largest free fragment is 29054
               RAM used:   39 (2%) at main() level
                           63 (3%) worst case
               Stack used: 6 locations (2 in main + 4 for interrupts)
               Stack size: 31

*
0000:  GOTO   0BE4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.3
004A:  GOTO   0054
004E:  BTFSC  FF2.0
0050:  GOTO   0124
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   015E
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... /*  
....................     Created on : 01/12/2017 
....................     Author     : 
....................                   script-cat@outlook.com 
....................                   uavlabs.org 
....................      
....................     Programa para un micro controlador 18F2550 el cual se encarga del control de una 
....................     planta clasificadora de paquetes. 
.................... */ 
....................  
.................... #include <18F2550.h> 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
00A2:  TBLRD*+
00A4:  MOVF   FF5,F
00A6:  BZ    00C2
00A8:  MOVFF  FF6,3D
00AC:  MOVFF  FF7,3E
00B0:  MOVF   FF5,W
00B2:  BTFSS  F9E.4
00B4:  BRA    00B2
00B6:  MOVWF  FAD
00B8:  MOVFF  3D,FF6
00BC:  MOVFF  3E,FF7
00C0:  BRA    00A2
00C2:  GOTO   0132 (RETURN)
*
013E:  DATA 37,2E
0140:  DATA 30,30
0142:  DATA 30,30
0144:  DATA 00,00
*
01B8:  MOVLW  8E
01BA:  MOVWF  00
01BC:  MOVFF  24,01
01C0:  MOVFF  23,02
01C4:  CLRF   03
01C6:  MOVF   01,F
01C8:  BNZ   01DC
01CA:  MOVFF  02,01
01CE:  CLRF   02
01D0:  MOVLW  08
01D2:  SUBWF  00,F
01D4:  MOVF   01,F
01D6:  BNZ   01DC
01D8:  CLRF   00
01DA:  BRA    01EC
01DC:  BCF    FD8.0
01DE:  BTFSC  01.7
01E0:  BRA    01EA
01E2:  RLCF   02,F
01E4:  RLCF   01,F
01E6:  DECF   00,F
01E8:  BRA    01DC
01EA:  BCF    01.7
01EC:  GOTO   02F6 (RETURN)
01F0:  MOVF   30,W
01F2:  BTFSC  FD8.2
01F4:  BRA    02D8
01F6:  MOVWF  00
01F8:  MOVF   34,W
01FA:  BTFSC  FD8.2
01FC:  BRA    02D8
01FE:  ADDWF  00,F
0200:  BNC   020A
0202:  MOVLW  81
0204:  ADDWF  00,F
0206:  BC    02D8
0208:  BRA    0212
020A:  MOVLW  7F
020C:  SUBWF  00,F
020E:  BNC   02D8
0210:  BZ    02D8
0212:  MOVFF  31,38
0216:  MOVF   35,W
0218:  XORWF  38,F
021A:  BSF    31.7
021C:  BSF    35.7
021E:  MOVF   33,W
0220:  MULWF  37
0222:  MOVFF  FF4,3A
0226:  MOVF   32,W
0228:  MULWF  36
022A:  MOVFF  FF4,03
022E:  MOVFF  FF3,39
0232:  MULWF  37
0234:  MOVF   FF3,W
0236:  ADDWF  3A,F
0238:  MOVF   FF4,W
023A:  ADDWFC 39,F
023C:  MOVLW  00
023E:  ADDWFC 03,F
0240:  MOVF   33,W
0242:  MULWF  36
0244:  MOVF   FF3,W
0246:  ADDWF  3A,F
0248:  MOVF   FF4,W
024A:  ADDWFC 39,F
024C:  MOVLW  00
024E:  CLRF   02
0250:  ADDWFC 03,F
0252:  ADDWFC 02,F
0254:  MOVF   31,W
0256:  MULWF  37
0258:  MOVF   FF3,W
025A:  ADDWF  39,F
025C:  MOVF   FF4,W
025E:  ADDWFC 03,F
0260:  MOVLW  00
0262:  ADDWFC 02,F
0264:  MOVF   31,W
0266:  MULWF  36
0268:  MOVF   FF3,W
026A:  ADDWF  03,F
026C:  MOVF   FF4,W
026E:  ADDWFC 02,F
0270:  MOVLW  00
0272:  CLRF   01
0274:  ADDWFC 01,F
0276:  MOVF   33,W
0278:  MULWF  35
027A:  MOVF   FF3,W
027C:  ADDWF  39,F
027E:  MOVF   FF4,W
0280:  ADDWFC 03,F
0282:  MOVLW  00
0284:  ADDWFC 02,F
0286:  ADDWFC 01,F
0288:  MOVF   32,W
028A:  MULWF  35
028C:  MOVF   FF3,W
028E:  ADDWF  03,F
0290:  MOVF   FF4,W
0292:  ADDWFC 02,F
0294:  MOVLW  00
0296:  ADDWFC 01,F
0298:  MOVF   31,W
029A:  MULWF  35
029C:  MOVF   FF3,W
029E:  ADDWF  02,F
02A0:  MOVF   FF4,W
02A2:  ADDWFC 01,F
02A4:  INCF   00,F
02A6:  BTFSC  01.7
02A8:  BRA    02B4
02AA:  RLCF   39,F
02AC:  RLCF   03,F
02AE:  RLCF   02,F
02B0:  RLCF   01,F
02B2:  DECF   00,F
02B4:  MOVLW  00
02B6:  BTFSS  39.7
02B8:  BRA    02CE
02BA:  INCF   03,F
02BC:  ADDWFC 02,F
02BE:  ADDWFC 01,F
02C0:  MOVF   01,W
02C2:  BNZ   02CE
02C4:  MOVF   02,W
02C6:  BNZ   02CE
02C8:  MOVF   03,W
02CA:  BNZ   02CE
02CC:  INCF   00,F
02CE:  BTFSC  38.7
02D0:  BSF    01.7
02D2:  BTFSS  38.7
02D4:  BCF    01.7
02D6:  BRA    02E0
02D8:  CLRF   00
02DA:  CLRF   01
02DC:  CLRF   02
02DE:  CLRF   03
02E0:  RETURN 0
*
031A:  MOVFF  28,2F
031E:  MOVF   2C,W
0320:  XORWF  2F,F
0322:  BTFSS  2F.7
0324:  BRA    0330
0326:  BCF    FD8.2
0328:  BCF    FD8.0
032A:  BTFSC  28.7
032C:  BSF    FD8.0
032E:  BRA    038E
0330:  MOVFF  28,2F
0334:  MOVFF  2B,30
0338:  MOVF   27,W
033A:  SUBWF  30,F
033C:  BZ    034A
033E:  BTFSS  2F.7
0340:  BRA    038E
0342:  MOVF   FD8,W
0344:  XORLW  01
0346:  MOVWF  FD8
0348:  BRA    038E
034A:  MOVFF  2C,30
034E:  MOVF   28,W
0350:  SUBWF  30,F
0352:  BZ    0360
0354:  BTFSS  2F.7
0356:  BRA    038E
0358:  MOVF   FD8,W
035A:  XORLW  01
035C:  MOVWF  FD8
035E:  BRA    038E
0360:  MOVFF  2D,30
0364:  MOVF   29,W
0366:  SUBWF  30,F
0368:  BZ    0376
036A:  BTFSS  2F.7
036C:  BRA    038E
036E:  MOVF   FD8,W
0370:  XORLW  01
0372:  MOVWF  FD8
0374:  BRA    038E
0376:  MOVFF  2E,30
037A:  MOVF   2A,W
037C:  SUBWF  30,F
037E:  BZ    038C
0380:  BTFSS  2F.7
0382:  BRA    038E
0384:  MOVF   FD8,W
0386:  XORLW  01
0388:  MOVWF  FD8
038A:  BRA    038E
038C:  BCF    FD8.0
038E:  RETURN 0
0390:  MOVLW  80
0392:  BTFSC  FD8.1
0394:  XORWF  2A,F
0396:  CLRF   2F
0398:  CLRF   30
039A:  MOVFF  26,2E
039E:  MOVF   2A,W
03A0:  XORWF  2E,F
03A2:  MOVF   25,W
03A4:  BTFSC  FD8.2
03A6:  BRA    0560
03A8:  MOVWF  2D
03AA:  MOVWF  00
03AC:  MOVF   29,W
03AE:  BTFSC  FD8.2
03B0:  BRA    0572
03B2:  SUBWF  2D,F
03B4:  BTFSC  FD8.2
03B6:  BRA    04BA
03B8:  BNC   0434
03BA:  MOVFF  2A,33
03BE:  BSF    33.7
03C0:  MOVFF  2B,32
03C4:  MOVFF  2C,31
03C8:  CLRF   30
03CA:  BCF    FD8.0
03CC:  RRCF   33,F
03CE:  RRCF   32,F
03D0:  RRCF   31,F
03D2:  RRCF   30,F
03D4:  DECFSZ 2D,F
03D6:  BRA    03C8
03D8:  BTFSS  2E.7
03DA:  BRA    03E2
03DC:  BSF    2F.0
03DE:  BRA    059A
03E0:  BCF    2F.0
03E2:  BCF    2D.0
03E4:  BSF    2F.4
03E6:  CLRF   FEA
03E8:  MOVLW  28
03EA:  MOVWF  FE9
03EC:  BRA    05C0
03EE:  BCF    2F.4
03F0:  BTFSC  2E.7
03F2:  BRA    0408
03F4:  BTFSS  2D.0
03F6:  BRA    041E
03F8:  RRCF   33,F
03FA:  RRCF   32,F
03FC:  RRCF   31,F
03FE:  RRCF   30,F
0400:  INCF   00,F
0402:  BTFSC  FD8.2
0404:  BRA    0590
0406:  BRA    041E
0408:  BTFSC  33.7
040A:  BRA    0424
040C:  BCF    FD8.0
040E:  RLCF   30,F
0410:  RLCF   31,F
0412:  RLCF   32,F
0414:  RLCF   33,F
0416:  DECF   00,F
0418:  BTFSC  FD8.2
041A:  BRA    0590
041C:  BRA    0408
041E:  BSF    2F.6
0420:  BRA    04F8
0422:  BCF    2F.6
0424:  MOVFF  26,2E
0428:  BTFSS  26.7
042A:  BRA    0430
042C:  BSF    33.7
042E:  BRA    0582
0430:  BCF    33.7
0432:  BRA    0582
0434:  MOVFF  29,2D
0438:  MOVFF  29,00
043C:  MOVF   25,W
043E:  SUBWF  2D,F
0440:  MOVFF  26,33
0444:  BSF    33.7
0446:  MOVFF  27,32
044A:  MOVFF  28,31
044E:  CLRF   30
0450:  BCF    FD8.0
0452:  RRCF   33,F
0454:  RRCF   32,F
0456:  RRCF   31,F
0458:  RRCF   30,F
045A:  DECFSZ 2D,F
045C:  BRA    044E
045E:  BTFSS  2E.7
0460:  BRA    0468
0462:  BSF    2F.1
0464:  BRA    059A
0466:  BCF    2F.1
0468:  BCF    2D.0
046A:  BSF    2F.5
046C:  CLRF   FEA
046E:  MOVLW  2C
0470:  MOVWF  FE9
0472:  BRA    05C0
0474:  BCF    2F.5
0476:  BTFSC  2E.7
0478:  BRA    048E
047A:  BTFSS  2D.0
047C:  BRA    04A4
047E:  RRCF   33,F
0480:  RRCF   32,F
0482:  RRCF   31,F
0484:  RRCF   30,F
0486:  INCF   00,F
0488:  BTFSC  FD8.2
048A:  BRA    0590
048C:  BRA    04A4
048E:  BTFSC  33.7
0490:  BRA    04AA
0492:  BCF    FD8.0
0494:  RLCF   30,F
0496:  RLCF   31,F
0498:  RLCF   32,F
049A:  RLCF   33,F
049C:  DECF   00,F
049E:  BTFSC  FD8.2
04A0:  BRA    0590
04A2:  BRA    048E
04A4:  BSF    2F.7
04A6:  BRA    04F8
04A8:  BCF    2F.7
04AA:  MOVFF  2A,2E
04AE:  BTFSS  2A.7
04B0:  BRA    04B6
04B2:  BSF    33.7
04B4:  BRA    0582
04B6:  BCF    33.7
04B8:  BRA    0582
04BA:  MOVFF  2A,33
04BE:  BSF    33.7
04C0:  MOVFF  2B,32
04C4:  MOVFF  2C,31
04C8:  BTFSS  2E.7
04CA:  BRA    04D4
04CC:  BCF    33.7
04CE:  BSF    2F.2
04D0:  BRA    059A
04D2:  BCF    2F.2
04D4:  CLRF   30
04D6:  BCF    2D.0
04D8:  CLRF   FEA
04DA:  MOVLW  28
04DC:  MOVWF  FE9
04DE:  BRA    05C0
04E0:  BTFSC  2E.7
04E2:  BRA    051C
04E4:  MOVFF  26,2E
04E8:  BTFSS  2D.0
04EA:  BRA    04F8
04EC:  RRCF   33,F
04EE:  RRCF   32,F
04F0:  RRCF   31,F
04F2:  RRCF   30,F
04F4:  INCF   00,F
04F6:  BZ    0590
04F8:  BTFSS  30.7
04FA:  BRA    0512
04FC:  INCF   31,F
04FE:  BNZ   0512
0500:  INCF   32,F
0502:  BNZ   0512
0504:  INCF   33,F
0506:  BNZ   0512
0508:  RRCF   33,F
050A:  RRCF   32,F
050C:  RRCF   31,F
050E:  INCF   00,F
0510:  BZ    0590
0512:  BTFSC  2F.6
0514:  BRA    0422
0516:  BTFSC  2F.7
0518:  BRA    04A8
051A:  BRA    0554
051C:  MOVLW  80
051E:  XORWF  33,F
0520:  BTFSS  33.7
0522:  BRA    052C
0524:  BRA    059A
0526:  MOVFF  2A,2E
052A:  BRA    0540
052C:  MOVFF  26,2E
0530:  MOVF   33,F
0532:  BNZ   0540
0534:  MOVF   32,F
0536:  BNZ   0540
0538:  MOVF   31,F
053A:  BNZ   0540
053C:  CLRF   00
053E:  BRA    0582
0540:  BTFSC  33.7
0542:  BRA    0554
0544:  BCF    FD8.0
0546:  RLCF   30,F
0548:  RLCF   31,F
054A:  RLCF   32,F
054C:  RLCF   33,F
054E:  DECFSZ 00,F
0550:  BRA    0540
0552:  BRA    0590
0554:  BTFSS  2E.7
0556:  BRA    055C
0558:  BSF    33.7
055A:  BRA    0582
055C:  BCF    33.7
055E:  BRA    0582
0560:  MOVFF  29,00
0564:  MOVFF  2A,33
0568:  MOVFF  2B,32
056C:  MOVFF  2C,31
0570:  BRA    0582
0572:  MOVFF  25,00
0576:  MOVFF  26,33
057A:  MOVFF  27,32
057E:  MOVFF  28,31
0582:  MOVFF  33,01
0586:  MOVFF  32,02
058A:  MOVFF  31,03
058E:  BRA    05F8
0590:  CLRF   00
0592:  CLRF   01
0594:  CLRF   02
0596:  CLRF   03
0598:  BRA    05F8
059A:  CLRF   30
059C:  COMF   31,F
059E:  COMF   32,F
05A0:  COMF   33,F
05A2:  COMF   30,F
05A4:  INCF   30,F
05A6:  BNZ   05B2
05A8:  INCF   31,F
05AA:  BNZ   05B2
05AC:  INCF   32,F
05AE:  BNZ   05B2
05B0:  INCF   33,F
05B2:  BTFSC  2F.0
05B4:  BRA    03E0
05B6:  BTFSC  2F.1
05B8:  BRA    0466
05BA:  BTFSC  2F.2
05BC:  BRA    04D2
05BE:  BRA    0526
05C0:  MOVF   FEF,W
05C2:  ADDWF  31,F
05C4:  BNC   05D0
05C6:  INCF   32,F
05C8:  BNZ   05D0
05CA:  INCF   33,F
05CC:  BTFSC  FD8.2
05CE:  BSF    2D.0
05D0:  MOVF   FED,F
05D2:  MOVF   FEF,W
05D4:  ADDWF  32,F
05D6:  BNC   05DE
05D8:  INCF   33,F
05DA:  BTFSC  FD8.2
05DC:  BSF    2D.0
05DE:  MOVF   FED,F
05E0:  MOVF   FEF,W
05E2:  BTFSC  FEF.7
05E4:  BRA    05E8
05E6:  XORLW  80
05E8:  ADDWF  33,F
05EA:  BTFSC  FD8.0
05EC:  BSF    2D.0
05EE:  BTFSC  2F.4
05F0:  BRA    03EE
05F2:  BTFSC  2F.5
05F4:  BRA    0474
05F6:  BRA    04E0
05F8:  GOTO   0D00 (RETURN)
05FC:  MOVF   23,W
05FE:  BTFSC  FD8.2
0600:  BRA    074C
0602:  MOVWF  2F
0604:  MOVF   27,W
0606:  BTFSC  FD8.2
0608:  BRA    074C
060A:  SUBWF  2F,F
060C:  BNC   0618
060E:  MOVLW  7F
0610:  ADDWF  2F,F
0612:  BTFSC  FD8.0
0614:  BRA    074C
0616:  BRA    0624
0618:  MOVLW  81
061A:  SUBWF  2F,F
061C:  BTFSS  FD8.0
061E:  BRA    074C
0620:  BTFSC  FD8.2
0622:  BRA    074C
0624:  MOVFF  2F,00
0628:  CLRF   01
062A:  CLRF   02
062C:  CLRF   03
062E:  CLRF   2E
0630:  MOVFF  24,2D
0634:  BSF    2D.7
0636:  MOVFF  25,2C
063A:  MOVFF  26,2B
063E:  MOVLW  19
0640:  MOVWF  2F
0642:  MOVF   2A,W
0644:  SUBWF  2B,F
0646:  BC    0662
0648:  MOVLW  01
064A:  SUBWF  2C,F
064C:  BC    0662
064E:  SUBWF  2D,F
0650:  BC    0662
0652:  SUBWF  2E,F
0654:  BC    0662
0656:  INCF   2E,F
0658:  INCF   2D,F
065A:  INCF   2C,F
065C:  MOVF   2A,W
065E:  ADDWF  2B,F
0660:  BRA    06B2
0662:  MOVF   29,W
0664:  SUBWF  2C,F
0666:  BC    068C
0668:  MOVLW  01
066A:  SUBWF  2D,F
066C:  BC    068C
066E:  SUBWF  2E,F
0670:  BC    068C
0672:  INCF   2E,F
0674:  INCF   2D,F
0676:  MOVF   29,W
0678:  ADDWF  2C,F
067A:  MOVF   2A,W
067C:  ADDWF  2B,F
067E:  BNC   06B2
0680:  INCF   2C,F
0682:  BNZ   06B2
0684:  INCF   2D,F
0686:  BNZ   06B2
0688:  INCF   2E,F
068A:  BRA    06B2
068C:  MOVF   28,W
068E:  IORLW  80
0690:  SUBWF  2D,F
0692:  BC    06B0
0694:  MOVLW  01
0696:  SUBWF  2E,F
0698:  BC    06B0
069A:  INCF   2E,F
069C:  MOVF   28,W
069E:  IORLW  80
06A0:  ADDWF  2D,F
06A2:  MOVF   29,W
06A4:  ADDWF  2C,F
06A6:  BNC   067A
06A8:  INCF   2D,F
06AA:  BNZ   067A
06AC:  INCF   2E,F
06AE:  BRA    067A
06B0:  BSF    03.0
06B2:  DECFSZ 2F,F
06B4:  BRA    06B8
06B6:  BRA    06CE
06B8:  BCF    FD8.0
06BA:  RLCF   2B,F
06BC:  RLCF   2C,F
06BE:  RLCF   2D,F
06C0:  RLCF   2E,F
06C2:  BCF    FD8.0
06C4:  RLCF   03,F
06C6:  RLCF   02,F
06C8:  RLCF   01,F
06CA:  RLCF   30,F
06CC:  BRA    0642
06CE:  BTFSS  30.0
06D0:  BRA    06DE
06D2:  BCF    FD8.0
06D4:  RRCF   01,F
06D6:  RRCF   02,F
06D8:  RRCF   03,F
06DA:  RRCF   30,F
06DC:  BRA    06E2
06DE:  DECF   00,F
06E0:  BZ    074C
06E2:  BTFSC  30.7
06E4:  BRA    0722
06E6:  BCF    FD8.0
06E8:  RLCF   2B,F
06EA:  RLCF   2C,F
06EC:  RLCF   2D,F
06EE:  RLCF   2E,F
06F0:  MOVF   2A,W
06F2:  SUBWF  2B,F
06F4:  BC    0704
06F6:  MOVLW  01
06F8:  SUBWF  2C,F
06FA:  BC    0704
06FC:  SUBWF  2D,F
06FE:  BC    0704
0700:  SUBWF  2E,F
0702:  BNC   0738
0704:  MOVF   29,W
0706:  SUBWF  2C,F
0708:  BC    0714
070A:  MOVLW  01
070C:  SUBWF  2D,F
070E:  BC    0714
0710:  SUBWF  2E,F
0712:  BNC   0738
0714:  MOVF   28,W
0716:  IORLW  80
0718:  SUBWF  2D,F
071A:  BC    0722
071C:  MOVLW  01
071E:  SUBWF  2E,F
0720:  BNC   0738
0722:  INCF   03,F
0724:  BNZ   0738
0726:  INCF   02,F
0728:  BNZ   0738
072A:  INCF   01,F
072C:  BNZ   0738
072E:  INCF   00,F
0730:  BZ    074C
0732:  RRCF   01,F
0734:  RRCF   02,F
0736:  RRCF   03,F
0738:  MOVFF  24,2F
073C:  MOVF   28,W
073E:  XORWF  2F,F
0740:  BTFSS  2F.7
0742:  BRA    0748
0744:  BSF    01.7
0746:  BRA    0754
0748:  BCF    01.7
074A:  BRA    0754
074C:  CLRF   00
074E:  CLRF   01
0750:  CLRF   02
0752:  CLRF   03
0754:  GOTO   0D3A (RETURN)
0758:  MOVF   30,W
075A:  SUBLW  B6
075C:  MOVWF  30
075E:  CLRF   03
0760:  MOVFF  31,34
0764:  BSF    31.7
0766:  BCF    FD8.0
0768:  RRCF   31,F
076A:  RRCF   32,F
076C:  RRCF   33,F
076E:  RRCF   03,F
0770:  RRCF   02,F
0772:  RRCF   01,F
0774:  RRCF   00,F
0776:  DECFSZ 30,F
0778:  BRA    0766
077A:  BTFSS  34.7
077C:  BRA    0794
077E:  COMF   00,F
0780:  COMF   01,F
0782:  COMF   02,F
0784:  COMF   03,F
0786:  INCF   00,F
0788:  BTFSC  FD8.2
078A:  INCF   01,F
078C:  BTFSC  FD8.2
078E:  INCF   02,F
0790:  BTFSC  FD8.2
0792:  INCF   03,F
0794:  GOTO   0874 (RETURN)
0798:  BTFSC  FD8.1
079A:  BRA    07A2
079C:  CLRF   FEA
079E:  MOVLW  38
07A0:  MOVWF  FE9
07A2:  CLRF   00
07A4:  CLRF   01
07A6:  CLRF   02
07A8:  CLRF   03
07AA:  CLRF   38
07AC:  CLRF   39
07AE:  CLRF   3A
07B0:  CLRF   3B
07B2:  MOVF   37,W
07B4:  IORWF  36,W
07B6:  IORWF  35,W
07B8:  IORWF  34,W
07BA:  BZ    0814
07BC:  MOVLW  20
07BE:  MOVWF  3C
07C0:  BCF    FD8.0
07C2:  RLCF   30,F
07C4:  RLCF   31,F
07C6:  RLCF   32,F
07C8:  RLCF   33,F
07CA:  RLCF   38,F
07CC:  RLCF   39,F
07CE:  RLCF   3A,F
07D0:  RLCF   3B,F
07D2:  MOVF   37,W
07D4:  SUBWF  3B,W
07D6:  BNZ   07E8
07D8:  MOVF   36,W
07DA:  SUBWF  3A,W
07DC:  BNZ   07E8
07DE:  MOVF   35,W
07E0:  SUBWF  39,W
07E2:  BNZ   07E8
07E4:  MOVF   34,W
07E6:  SUBWF  38,W
07E8:  BNC   0808
07EA:  MOVF   34,W
07EC:  SUBWF  38,F
07EE:  MOVF   35,W
07F0:  BTFSS  FD8.0
07F2:  INCFSZ 35,W
07F4:  SUBWF  39,F
07F6:  MOVF   36,W
07F8:  BTFSS  FD8.0
07FA:  INCFSZ 36,W
07FC:  SUBWF  3A,F
07FE:  MOVF   37,W
0800:  BTFSS  FD8.0
0802:  INCFSZ 37,W
0804:  SUBWF  3B,F
0806:  BSF    FD8.0
0808:  RLCF   00,F
080A:  RLCF   01,F
080C:  RLCF   02,F
080E:  RLCF   03,F
0810:  DECFSZ 3C,F
0812:  BRA    07C0
0814:  MOVFF  38,FEF
0818:  MOVFF  39,FEC
081C:  MOVFF  3A,FEC
0820:  MOVFF  3B,FEC
0824:  RETURN 0
0826:  MOVF   FE9,W
0828:  MOVWF  28
082A:  MOVF   27,W
082C:  MOVWF  2A
082E:  BZ    0862
0830:  MOVFF  26,33
0834:  MOVFF  25,32
0838:  MOVFF  24,31
083C:  MOVFF  23,30
0840:  CLRF   37
0842:  CLRF   36
0844:  MOVLW  20
0846:  MOVWF  35
0848:  MOVLW  82
084A:  MOVWF  34
084C:  RCALL  01F0
084E:  MOVFF  03,26
0852:  MOVFF  02,25
0856:  MOVFF  01,24
085A:  MOVFF  00,23
085E:  DECFSZ 2A,F
0860:  BRA    0830
0862:  MOVFF  26,33
0866:  MOVFF  25,32
086A:  MOVFF  24,31
086E:  MOVFF  23,30
0872:  BRA    0758
0874:  MOVFF  03,26
0878:  MOVFF  02,25
087C:  MOVFF  01,24
0880:  MOVFF  00,23
0884:  BTFSS  26.7
0886:  BRA    08A2
0888:  DECF   28,F
088A:  BSF    28.5
088C:  COMF   23,F
088E:  COMF   24,F
0890:  COMF   25,F
0892:  COMF   26,F
0894:  INCF   23,F
0896:  BTFSC  FD8.2
0898:  INCF   24,F
089A:  BTFSC  FD8.2
089C:  INCF   25,F
089E:  BTFSC  FD8.2
08A0:  INCF   26,F
08A2:  MOVLW  3B
08A4:  MOVWF  2F
08A6:  MOVLW  9A
08A8:  MOVWF  2E
08AA:  MOVLW  CA
08AC:  MOVWF  2D
08AE:  CLRF   2C
08B0:  MOVLW  0A
08B2:  MOVWF  2A
08B4:  MOVF   27,W
08B6:  BTFSC  FD8.2
08B8:  INCF   28,F
08BA:  BSF    FD8.1
08BC:  CLRF   FEA
08BE:  MOVLW  23
08C0:  MOVWF  FE9
08C2:  MOVFF  26,33
08C6:  MOVFF  25,32
08CA:  MOVFF  24,31
08CE:  MOVFF  23,30
08D2:  MOVFF  2F,37
08D6:  MOVFF  2E,36
08DA:  MOVFF  2D,35
08DE:  MOVFF  2C,34
08E2:  RCALL  0798
08E4:  MOVF   01,W
08E6:  MOVF   00,F
08E8:  BNZ   0908
08EA:  INCF   27,W
08EC:  SUBWF  2A,W
08EE:  BZ    0908
08F0:  MOVF   28,W
08F2:  BZ    090C
08F4:  ANDLW  0F
08F6:  SUBWF  2A,W
08F8:  BZ    08FC
08FA:  BC    0972
08FC:  BTFSC  28.7
08FE:  BRA    0972
0900:  BTFSC  28.6
0902:  BRA    090C
0904:  MOVLW  20
0906:  BRA    0968
0908:  MOVLW  20
090A:  ANDWF  28,F
090C:  BTFSS  28.5
090E:  BRA    092A
0910:  BCF    28.5
0912:  MOVF   27,W
0914:  BTFSS  FD8.2
0916:  DECF   28,F
0918:  MOVF   00,W
091A:  MOVWF  28
091C:  MOVLW  2D
091E:  BTFSS  F9E.4
0920:  BRA    091E
0922:  MOVWF  FAD
0924:  MOVF   28,W
0926:  MOVWF  00
0928:  CLRF   28
092A:  MOVF   27,W
092C:  SUBWF  2A,W
092E:  BNZ   0946
0930:  MOVF   00,W
0932:  MOVWF  28
0934:  MOVLW  2E
0936:  BTFSS  F9E.4
0938:  BRA    0936
093A:  MOVWF  FAD
093C:  MOVF   28,W
093E:  MOVWF  00
0940:  MOVLW  20
0942:  ANDWF  28,F
0944:  MOVLW  00
0946:  MOVLW  30
0948:  BTFSS  28.5
094A:  BRA    0968
094C:  BCF    28.5
094E:  MOVF   27,W
0950:  BTFSS  FD8.2
0952:  DECF   28,F
0954:  MOVF   00,W
0956:  MOVWF  28
0958:  MOVLW  2D
095A:  BTFSS  F9E.4
095C:  BRA    095A
095E:  MOVWF  FAD
0960:  MOVF   28,W
0962:  MOVWF  00
0964:  CLRF   28
0966:  MOVLW  30
0968:  ADDWF  00,F
096A:  MOVF   00,W
096C:  BTFSS  F9E.4
096E:  BRA    096C
0970:  MOVWF  FAD
0972:  BCF    FD8.1
0974:  MOVFF  2F,33
0978:  MOVFF  2E,32
097C:  MOVFF  2D,31
0980:  MOVFF  2C,30
0984:  CLRF   37
0986:  CLRF   36
0988:  CLRF   35
098A:  MOVLW  0A
098C:  MOVWF  34
098E:  RCALL  0798
0990:  MOVFF  03,2F
0994:  MOVFF  02,2E
0998:  MOVFF  01,2D
099C:  MOVFF  00,2C
09A0:  DECFSZ 2A,F
09A2:  BRA    08BA
09A4:  GOTO   0D64 (RETURN)
09A8:  MOVF   27,W
09AA:  ANDLW  07
09AC:  MOVWF  00
09AE:  RRCF   27,W
09B0:  MOVWF  01
09B2:  RRCF   01,F
09B4:  RRCF   01,F
09B6:  MOVLW  1F
09B8:  ANDWF  01,F
09BA:  MOVF   01,W
09BC:  ADDWF  29,W
09BE:  MOVWF  FE9
09C0:  MOVLW  00
09C2:  ADDWFC 2A,W
09C4:  MOVWF  FEA
09C6:  CLRF   01
09C8:  INCF   01,F
09CA:  INCF   00,F
09CC:  BRA    09D0
09CE:  RLCF   01,F
09D0:  DECFSZ 00,F
09D2:  BRA    09CE
09D4:  MOVF   28,F
09D6:  BZ    09DE
09D8:  MOVF   01,W
09DA:  IORWF  FEF,F
09DC:  BRA    09E4
09DE:  COMF   01,F
09E0:  MOVF   01,W
09E2:  ANDWF  FEF,F
09E4:  RETURN 0
....................  
.................... #list 
....................  
.................... #fuses xt, nowdt, noprotect, put, CPUDIV1 
....................  
.................... // Numero de bits a utilizar en el convertidor analogo a digital 
.................... #device adc = 10 
.................... // se define el uso del reloj interno a 8Mhz 
.................... #use delay(internal = 8000000) 
*
00C6:  CLRF   FEA
00C8:  MOVLW  3E
00CA:  MOVWF  FE9
00CC:  MOVF   FEF,W
00CE:  BZ    00EA
00D0:  MOVLW  02
00D2:  MOVWF  01
00D4:  CLRF   00
00D6:  DECFSZ 00,F
00D8:  BRA    00D6
00DA:  DECFSZ 01,F
00DC:  BRA    00D4
00DE:  MOVLW  97
00E0:  MOVWF  00
00E2:  DECFSZ 00,F
00E4:  BRA    00E2
00E6:  DECFSZ FEF,F
00E8:  BRA    00D0
00EA:  RETURN 0
*
09E6:  MOVLW  09
09E8:  SUBWF  2A,F
09EA:  BNC   0A02
09EC:  CLRF   FEA
09EE:  MOVLW  2A
09F0:  MOVWF  FE9
09F2:  BCF    FD8.0
09F4:  RRCF   FEF,F
09F6:  MOVF   FEF,W
09F8:  BZ    0A02
09FA:  BRA    09FE
09FC:  NOP   
09FE:  DECFSZ FEF,F
0A00:  BRA    09FC
0A02:  RETURN 0
....................  
.................... // se define la comunicacion serial a 9600 baudios, sin paridad y un bit de stop 
.................... #use rs232(baud = 9600, bits = 8, parity = N, xmit = PIN_C6, RCV = PIN_C7, stop=1, ERRORS) 
*
0146:  BTFSS  F9E.5
0148:  BRA    0146
014A:  MOVFF  FAB,17
014E:  MOVFF  FAE,01
0152:  BTFSS  17.1
0154:  BRA    015A
0156:  BCF    FAB.4
0158:  BSF    FAB.4
015A:  GOTO   0164 (RETURN)
....................  
.................... #use fast_io(b) 
.................... #use fast_io(a) 
.................... #use fast_io(c) 
....................  
....................  
.................... // ****************  Variables Globales  ******************* 
....................  
.................... // calculo de la resulucion para una salida maxima de 5 
.................... float resolucion = (float) 5 / (float) 1023; 
....................  
.................... // se guarda el ultimo caracter que se recibe por serial 
.................... char dato_recibido = '0'; 
....................  
.................... // se usa en los bucles 
.................... int i; 
....................  
.................... // se calcula el promedio del peso 
.................... float promedio = 0.0f; 
....................  
.................... // bandera que avisa si la caja paso la primera banda 
.................... boolean primera_etapa = false; 
....................  
.................... // se define una simulacion de un puerto pwm de 50 hz 
.................... void duty_50(int puerto, int16 time_on, int ciclos){ 
....................     for (i = 0; i < ciclos; i++) { 
*
0A04:  CLRF   1D
0A06:  MOVF   26,W
0A08:  SUBWF  1D,W
0A0A:  BC    0A70
....................         output_high(puerto); 
0A0C:  MOVFF  23,27
0A10:  MOVLW  01
0A12:  MOVWF  28
0A14:  MOVLW  0F
0A16:  MOVWF  2A
0A18:  MOVLW  89
0A1A:  MOVWF  29
0A1C:  RCALL  09A8
....................         delay_us(time_on); 
0A1E:  MOVFF  25,27
0A22:  INCF   27,F
0A24:  DECF   27,F
0A26:  BTFSC  FD8.2
0A28:  BRA    0A30
0A2A:  SETF   2A
0A2C:  RCALL  09E6
0A2E:  BRA    0A24
0A30:  MOVFF  24,2A
0A34:  RCALL  09E6
....................         output_low(puerto); 
0A36:  MOVFF  23,27
0A3A:  CLRF   28
0A3C:  MOVLW  0F
0A3E:  MOVWF  2A
0A40:  MOVLW  89
0A42:  MOVWF  29
0A44:  RCALL  09A8
....................         delay_us(20000 - time_on); 
0A46:  MOVLW  20
0A48:  BSF    FD8.0
0A4A:  SUBFWB 24,W
0A4C:  MOVWF  27
0A4E:  MOVLW  4E
0A50:  SUBFWB 25,W
0A52:  MOVWF  28
0A54:  MOVFF  28,29
0A58:  INCF   29,F
0A5A:  DECF   29,F
0A5C:  BTFSC  FD8.2
0A5E:  BRA    0A66
0A60:  SETF   2A
0A62:  RCALL  09E6
0A64:  BRA    0A5A
0A66:  MOVFF  27,2A
0A6A:  RCALL  09E6
0A6C:  INCF   1D,F
0A6E:  BRA    0A06
....................     } 
0A70:  RETURN 0
.................... } 
....................  
.................... void define_puertos() { 
....................         
....................     /* Define el pin 7 y 0 como entrada y el resto del puerto como salidas 
....................     3 y 4 leds indicadores de caja 
....................     0  entrada finales de carrera 
....................     2 banda 1 
....................     bin: 1110 0001 
....................     */ 
....................         
....................     set_tris_b(0xE1); 
*
0180:  MOVLW  E1
0182:  MOVWF  F93
....................     output_low(PIN_B1); 
0184:  BCF    F8A.1
....................         
....................     // define la entrada 0 del puerto a como entrada 
....................     //bin: 0000 0001 
....................     set_tris_a(0x01); 
0186:  MOVLW  01
0188:  MOVWF  F92
....................     output_high(PIN_A5); 
018A:  BSF    F89.5
....................     output_low(PIN_A3); 
018C:  BCF    F89.3
....................         
....................     // se define el puerto c como salida 
....................     set_tris_c(0x00); 
018E:  MOVLW  00
0190:  MOVWF  F94
....................     output_c(0x00); 
0192:  CLRF   F8B
....................         
....................     // Define como entradas analoga el puerto AN0 
....................     SETUP_ADC_PORTS(AN0); 
0194:  MOVF   FC1,W
0196:  ANDLW  C0
0198:  IORLW  0E
019A:  MOVWF  FC1
....................         
....................     // Define el relog interno para el uso del ADC 
....................     SETUP_ADC(ADC_CLOCK_INTERNAL); 
019C:  MOVF   FC0,W
019E:  ANDLW  C0
01A0:  IORLW  07
01A2:  MOVWF  FC0
01A4:  BSF    FC0.7
01A6:  BSF    FC2.0
....................      
....................     // se configura el canal del adc 
....................     SET_ADC_CHANNEL(0); 
01A8:  MOVLW  00
01AA:  MOVWF  01
01AC:  MOVF   FC2,W
01AE:  ANDLW  C3
01B0:  IORWF  01,W
01B2:  MOVWF  FC2
01B4:  GOTO   0C38 (RETURN)
.................... } 
....................  
.................... void correr_bandas_finales(){ 
....................     // corre las 3 bandas del rele por 3.5 seg 
....................     output_low(PIN_A5); 
*
00EC:  BCF    F89.5
....................     delay_ms(3500); 
00EE:  MOVLW  0E
00F0:  MOVWF  3D
00F2:  MOVLW  FA
00F4:  MOVWF  3E
00F6:  RCALL  00C6
00F8:  DECFSZ 3D,F
00FA:  BRA    00F2
....................     output_high(PIN_A5); 
00FC:  BSF    F89.5
00FE:  RETURN 0
.................... } 
....................  
.................... void parar_planta(){ 
....................     // se enciende el led indicador de paro 
....................     output_high(PIN_B1); 
0100:  BSF    F8A.1
....................      
....................     // se detiene la banda 1 
....................     output_low(PIN_B2); 
0102:  BCF    F8A.2
....................     // se detiene las bandas finales 
....................     output_high(PIN_A5); 
0104:  BSF    F89.5
....................      
....................     // se mantiene en el bucle hasta que se presione el boton de start 
....................     while(!input(PIN_B5)){ 
0106:  BTFSC  F81.5
0108:  BRA    0112
....................         delay_ms(100); 
010A:  MOVLW  64
010C:  MOVWF  3E
010E:  RCALL  00C6
0110:  BRA    0106
....................     } 
....................      
....................     if(primera_etapa){ 
0112:  BTFSS  22.0
0114:  BRA    011A
....................         // se reanuda la primera banda 
....................         output_high(PIN_B2); 
0116:  BSF    F8A.2
....................     }else{ 
0118:  BRA    0120
....................         // se encomprueba los finales de carrera del elevador 
....................         if(input(PIN_B0)){ 
011A:  BTFSS  F81.0
011C:  BRA    0120
....................             // esta en las bandas finles, activamos el rele de las badas 
....................             correr_bandas_finales(); 
011E:  RCALL  00EC
....................         } 
....................     } 
....................      
....................     // apagado del led indicador de paro 
....................     output_low(PIN_B1); 
0120:  BCF    F8A.1
0122:  RETURN 0
.................... } 
....................  
.................... // ************************* interupciones ************************ 
....................  
.................... // iterupcion de cambio en el puerto b 
.................... #int_rb 
.................... void int_rb_pulsadores(){ 
....................     //boton de rest b7 
....................     if(input(PIN_B7)){ 
0124:  BTFSS  F81.7
0126:  BRA    0132
....................         printf("7.0000"); 
0128:  MOVLW  3E
012A:  MOVWF  FF6
012C:  MOVLW  01
012E:  MOVWF  FF7
0130:  BRA    00A2
....................     } 
....................     // stop b6 
....................     if(input(PIN_B6)){ 
0132:  BTFSS  F81.6
0134:  BRA    0138
....................         parar_planta(); 
0136:  RCALL  0100
....................     } 
.................... } 
....................  
.................... //interrupcion de llegada de datos 
0138:  BCF    FF2.0
013A:  GOTO   0060
.................... #int_rda 
.................... void rb_isr() { 
....................     // comprueba si hay llegada de datos 
....................     if (kbhit()) { 
*
015E:  BTFSS  F9E.5
0160:  BRA    017A
....................         dato_recibido = getc(); 
0162:  BRA    0146
0164:  MOVFF  01,1C
....................         delay_ms(4); 
0168:  MOVLW  04
016A:  MOVWF  3E
016C:  RCALL  00C6
....................          
....................         if(dato_recibido == '1'){ 
016E:  MOVF   1C,W
0170:  SUBLW  31
0172:  BNZ   0176
....................             parar_planta(); 
0174:  RCALL  0100
....................         } 
....................          
....................         dato_recibido = '0'; 
0176:  MOVLW  30
0178:  MOVWF  1C
....................     } 
017A:  BCF    F9E.5
017C:  GOTO   0060
.................... } 
....................  
.................... // retorna un valor de 0 a 5 con respecto al valor medido en el pin A0 
.................... float leerADC() { 
....................     return resolucion * (float) (READ_ADC()); 
*
02E2:  BSF    FC2.1
02E4:  BTFSC  FC2.1
02E6:  BRA    02E4
02E8:  MOVFF  FC4,03
02EC:  MOVFF  FC3,23
02F0:  MOVFF  FC4,24
02F4:  BRA    01B8
02F6:  MOVFF  1B,33
02FA:  MOVFF  1A,32
02FE:  MOVFF  19,31
0302:  MOVFF  18,30
0306:  MOVFF  03,37
030A:  MOVFF  02,36
030E:  MOVFF  01,35
0312:  MOVFF  00,34
0316:  RCALL  01F0
0318:  RETURN 0
.................... } 
....................  
.................... void subir_ascensor() { 
....................     //ENABLE RA3,  datos: A1, A2 
....................     output_high(PIN_A1); 
*
0A72:  BSF    F89.1
....................     output_low(PIN_A2); 
0A74:  BCF    F89.2
....................      
....................     //inicio de la subida con fuerza 
....................     for (i = 0; i < 40; i++) { 
0A76:  CLRF   1D
0A78:  MOVF   1D,W
0A7A:  SUBLW  27
0A7C:  BNC   0AAE
....................         output_high(PIN_A3); 
0A7E:  BSF    F89.3
0A80:  CLRF   16
0A82:  BTFSC  FF2.7
0A84:  BSF    16.7
0A86:  BCF    FF2.7
....................         delay_ms(9); 
0A88:  MOVLW  09
0A8A:  MOVWF  3E
0A8C:  CALL   00C6
0A90:  BTFSC  16.7
0A92:  BSF    FF2.7
....................         output_low(PIN_A3); 
0A94:  BCF    F89.3
0A96:  CLRF   16
0A98:  BTFSC  FF2.7
0A9A:  BSF    16.7
0A9C:  BCF    FF2.7
....................         delay_ms(11); 
0A9E:  MOVLW  0B
0AA0:  MOVWF  3E
0AA2:  CALL   00C6
0AA6:  BTFSC  16.7
0AA8:  BSF    FF2.7
0AAA:  INCF   1D,F
0AAC:  BRA    0A78
....................     } 
....................      
....................     if (promedio >= 3.5) { 
0AAE:  CLRF   2A
0AB0:  CLRF   29
0AB2:  MOVLW  60
0AB4:  MOVWF  28
0AB6:  MOVLW  80
0AB8:  MOVWF  27
0ABA:  MOVFF  21,2E
0ABE:  MOVFF  20,2D
0AC2:  MOVFF  1F,2C
0AC6:  MOVFF  1E,2B
0ACA:  RCALL  031A
0ACC:  BC    0AD0
0ACE:  BNZ   0B04
....................         //cajas pesadas 
....................         while (!input(PIN_B0)) { 
0AD0:  BTFSC  F81.0
0AD2:  BRA    0B02
....................                 output_high(PIN_A3); 
0AD4:  BSF    F89.3
0AD6:  CLRF   16
0AD8:  BTFSC  FF2.7
0ADA:  BSF    16.7
0ADC:  BCF    FF2.7
....................                 delay_ms(8); 
0ADE:  MOVLW  08
0AE0:  MOVWF  3E
0AE2:  CALL   00C6
0AE6:  BTFSC  16.7
0AE8:  BSF    FF2.7
....................                 output_low(PIN_A3); 
0AEA:  BCF    F89.3
0AEC:  CLRF   16
0AEE:  BTFSC  FF2.7
0AF0:  BSF    16.7
0AF2:  BCF    FF2.7
....................                 delay_ms(12); 
0AF4:  MOVLW  0C
0AF6:  MOVWF  3E
0AF8:  CALL   00C6
0AFC:  BTFSC  16.7
0AFE:  BSF    FF2.7
0B00:  BRA    0AD0
....................             } 
....................     } else { 
0B02:  BRA    0B36
....................         //cajas livianas 
....................         while (!input(PIN_B0)) { 
0B04:  BTFSC  F81.0
0B06:  BRA    0B36
....................             output_high(PIN_A3); 
0B08:  BSF    F89.3
0B0A:  CLRF   16
0B0C:  BTFSC  FF2.7
0B0E:  BSF    16.7
0B10:  BCF    FF2.7
....................             delay_ms(6); 
0B12:  MOVLW  06
0B14:  MOVWF  3E
0B16:  CALL   00C6
0B1A:  BTFSC  16.7
0B1C:  BSF    FF2.7
....................             output_low(PIN_A3); 
0B1E:  BCF    F89.3
0B20:  CLRF   16
0B22:  BTFSC  FF2.7
0B24:  BSF    16.7
0B26:  BCF    FF2.7
....................             delay_ms(14); 
0B28:  MOVLW  0E
0B2A:  MOVWF  3E
0B2C:  CALL   00C6
0B30:  BTFSC  16.7
0B32:  BSF    FF2.7
0B34:  BRA    0B04
....................         } 
....................     } 
0B36:  GOTO   0DE2 (RETURN)
.................... } 
....................  
.................... void bajar_ascensor() { 
....................     //ENABLE RA3,  datos: A1, A2 
....................      
....................     output_low(PIN_A1); 
0B3A:  BCF    F89.1
....................     output_high(PIN_A2); 
0B3C:  BSF    F89.2
....................      
....................     for (i = 0; i < 40; i++) { 
0B3E:  CLRF   1D
0B40:  MOVF   1D,W
0B42:  SUBLW  27
0B44:  BNC   0B76
....................         output_high(PIN_A3); 
0B46:  BSF    F89.3
0B48:  CLRF   16
0B4A:  BTFSC  FF2.7
0B4C:  BSF    16.7
0B4E:  BCF    FF2.7
....................         delay_ms(12); 
0B50:  MOVLW  0C
0B52:  MOVWF  3E
0B54:  CALL   00C6
0B58:  BTFSC  16.7
0B5A:  BSF    FF2.7
....................         output_low(PIN_A3); 
0B5C:  BCF    F89.3
0B5E:  CLRF   16
0B60:  BTFSC  FF2.7
0B62:  BSF    16.7
0B64:  BCF    FF2.7
....................         delay_ms(8); 
0B66:  MOVLW  08
0B68:  MOVWF  3E
0B6A:  CALL   00C6
0B6E:  BTFSC  16.7
0B70:  BSF    FF2.7
0B72:  INCF   1D,F
0B74:  BRA    0B40
....................     } 
....................      
....................     for (i = 0; i < 80; i++) { 
0B76:  CLRF   1D
0B78:  MOVF   1D,W
0B7A:  SUBLW  4F
0B7C:  BNC   0BAE
....................         output_high(PIN_A3); 
0B7E:  BSF    F89.3
0B80:  CLRF   16
0B82:  BTFSC  FF2.7
0B84:  BSF    16.7
0B86:  BCF    FF2.7
....................         delay_ms(5); 
0B88:  MOVLW  05
0B8A:  MOVWF  3E
0B8C:  CALL   00C6
0B90:  BTFSC  16.7
0B92:  BSF    FF2.7
....................         output_low(PIN_A3); 
0B94:  BCF    F89.3
0B96:  CLRF   16
0B98:  BTFSC  FF2.7
0B9A:  BSF    16.7
0B9C:  BCF    FF2.7
....................         delay_ms(15); 
0B9E:  MOVLW  0F
0BA0:  MOVWF  3E
0BA2:  CALL   00C6
0BA6:  BTFSC  16.7
0BA8:  BSF    FF2.7
0BAA:  INCF   1D,F
0BAC:  BRA    0B78
....................     } 
....................      
....................     while (!input(PIN_B0)) { 
0BAE:  BTFSC  F81.0
0BB0:  BRA    0BE0
....................         output_high(PIN_A3); 
0BB2:  BSF    F89.3
0BB4:  CLRF   16
0BB6:  BTFSC  FF2.7
0BB8:  BSF    16.7
0BBA:  BCF    FF2.7
....................         delay_ms(3); 
0BBC:  MOVLW  03
0BBE:  MOVWF  3E
0BC0:  CALL   00C6
0BC4:  BTFSC  16.7
0BC6:  BSF    FF2.7
....................         output_low(PIN_A3); 
0BC8:  BCF    F89.3
0BCA:  CLRF   16
0BCC:  BTFSC  FF2.7
0BCE:  BSF    16.7
0BD0:  BCF    FF2.7
....................         delay_ms(17); 
0BD2:  MOVLW  11
0BD4:  MOVWF  3E
0BD6:  CALL   00C6
0BDA:  BTFSC  16.7
0BDC:  BSF    FF2.7
0BDE:  BRA    0BAE
....................     } 
0BE0:  GOTO   0E7E (RETURN)
.................... } 
....................  
.................... void main() { 
0BE4:  CLRF   FF8
0BE6:  BCF    FD0.7
0BE8:  BSF    07.7
0BEA:  MOVLW  70
0BEC:  MOVWF  FD3
0BEE:  MOVF   FD3,W
0BF0:  CLRF   17
0BF2:  BCF    FB8.3
0BF4:  MOVLW  0C
0BF6:  MOVWF  FAF
0BF8:  MOVLW  A2
0BFA:  MOVWF  FAC
0BFC:  MOVLW  90
0BFE:  MOVWF  FAB
0C00:  MOVLW  0A
0C02:  MOVWF  1B
0C04:  MOVLW  28
0C06:  MOVWF  1A
0C08:  MOVLW  20
0C0A:  MOVWF  19
0C0C:  MOVLW  77
0C0E:  MOVWF  18
0C10:  MOVLW  30
0C12:  MOVWF  1C
0C14:  CLRF   21
0C16:  CLRF   20
0C18:  CLRF   1F
0C1A:  CLRF   1E
0C1C:  BCF    22.0
0C1E:  MOVF   FC1,W
0C20:  ANDLW  C0
0C22:  IORLW  0F
0C24:  MOVWF  FC1
0C26:  MOVLW  07
0C28:  MOVWF  FB4
....................      
....................     //habilita las interrupciones por serial 
....................     enable_interrupts(int_rda); 
0C2A:  BSF    F9D.5
....................     //habilita las interrupciones puerto b 
....................     enable_interrupts(int_rb); 
0C2C:  BSF    FF2.3
....................     //habilita las interrupciones glovales 
....................     enable_interrupts(global); 
0C2E:  MOVLW  C0
0C30:  IORWF  FF2,F
....................      
....................     //intrerrupcion por flanco de subida 
....................     ext_int_edge(L_TO_H); 
0C32:  BSF    FF1.6
....................      
....................     // configura los puertos 
....................     define_puertos(); 
0C34:  GOTO   0180
....................      
....................      
....................     while (true) { 
....................         primera_etapa = true; 
0C38:  BSF    22.0
....................          
....................         // se apagan los led indicadores de caja 
....................         output_low(PIN_B3); 
0C3A:  BCF    F8A.3
....................         output_low(PIN_B4); 
0C3C:  BCF    F8A.4
....................          
....................         // inicia la banda 1 
....................         output_high(PIN_B2); 
0C3E:  BSF    F8A.2
0C40:  CLRF   16
0C42:  BTFSC  FF2.7
0C44:  BSF    16.7
0C46:  BCF    FF2.7
....................      
....................         // esta en este metodo hasta que pese algo 
....................         while (true) { 
....................             delay_ms(200); 
0C48:  MOVLW  C8
0C4A:  MOVWF  3E
0C4C:  CALL   00C6
0C50:  BTFSC  16.7
0C52:  BSF    FF2.7
....................             if (leerADC() > 1.0f) { 
0C54:  CALL   02E2
0C58:  MOVFF  03,26
0C5C:  MOVFF  02,25
0C60:  MOVFF  01,24
0C64:  MOVFF  00,23
0C68:  CLRF   2A
0C6A:  CLRF   29
0C6C:  CLRF   28
0C6E:  MOVLW  7F
0C70:  MOVWF  27
0C72:  MOVFF  03,2E
0C76:  MOVFF  02,2D
0C7A:  MOVFF  01,2C
0C7E:  MOVFF  00,2B
0C82:  CALL   031A
0C86:  BNC   0C8A
....................                 break; 
0C88:  BRA    0C8C
....................             } 
0C8A:  BRA    0C40
....................         } 
....................      
....................         // se detiene la banda 1 
....................         output_low(PIN_B2); 
0C8C:  BCF    F8A.2
....................      
....................         // espera 3s mientras cuadra la caja 
....................         delay_ms(3000); 
0C8E:  MOVLW  0C
0C90:  MOVWF  23
0C92:  CLRF   16
0C94:  BTFSC  FF2.7
0C96:  BSF    16.7
0C98:  BCF    FF2.7
0C9A:  MOVLW  FA
0C9C:  MOVWF  3E
0C9E:  CALL   00C6
0CA2:  BTFSC  16.7
0CA4:  BSF    FF2.7
0CA6:  DECFSZ 23,F
0CA8:  BRA    0C92
....................      
....................         // ******************* peso de la caja ************    
....................         for (i = 0; i < 7; i++) { 
0CAA:  CLRF   1D
0CAC:  MOVF   1D,W
0CAE:  SUBLW  06
0CB0:  BNC   0D1C
....................             delay_ms(300); 
0CB2:  MOVLW  02
0CB4:  MOVWF  23
0CB6:  CLRF   16
0CB8:  BTFSC  FF2.7
0CBA:  BSF    16.7
0CBC:  BCF    FF2.7
0CBE:  MOVLW  96
0CC0:  MOVWF  3E
0CC2:  CALL   00C6
0CC6:  BTFSC  16.7
0CC8:  BSF    FF2.7
0CCA:  DECFSZ 23,F
0CCC:  BRA    0CB6
....................             promedio += leerADC(); 
0CCE:  CALL   02E2
0CD2:  MOVFF  FEA,24
0CD6:  MOVFF  FE9,23
0CDA:  BCF    FD8.1
0CDC:  MOVFF  21,28
0CE0:  MOVFF  20,27
0CE4:  MOVFF  1F,26
0CE8:  MOVFF  1E,25
0CEC:  MOVFF  03,2C
0CF0:  MOVFF  02,2B
0CF4:  MOVFF  01,2A
0CF8:  MOVFF  00,29
0CFC:  GOTO   0390
0D00:  MOVFF  24,FEA
0D04:  MOVFF  23,FE9
0D08:  MOVFF  03,21
0D0C:  MOVFF  02,20
0D10:  MOVFF  01,1F
0D14:  MOVFF  00,1E
0D18:  INCF   1D,F
0D1A:  BRA    0CAC
....................         } 
....................         promedio /= 7; 
0D1C:  MOVFF  21,26
0D20:  MOVFF  20,25
0D24:  MOVFF  1F,24
0D28:  MOVFF  1E,23
0D2C:  CLRF   2A
0D2E:  CLRF   29
0D30:  MOVLW  60
0D32:  MOVWF  28
0D34:  MOVLW  81
0D36:  MOVWF  27
0D38:  BRA    05FC
0D3A:  MOVFF  03,21
0D3E:  MOVFF  02,20
0D42:  MOVFF  01,1F
0D46:  MOVFF  00,1E
....................   
....................         // se envia el peso por r232 
....................         printf("%1.4f", promedio); 
0D4A:  MOVLW  89
0D4C:  MOVWF  FE9
0D4E:  MOVFF  21,26
0D52:  MOVFF  20,25
0D56:  MOVFF  1F,24
0D5A:  MOVFF  1E,23
0D5E:  MOVLW  04
0D60:  MOVWF  27
0D62:  BRA    0826
....................         
....................      
....................         // enciende los led indicadores  
....................         if (promedio >= 3.5) { 
0D64:  CLRF   2A
0D66:  CLRF   29
0D68:  MOVLW  60
0D6A:  MOVWF  28
0D6C:  MOVLW  80
0D6E:  MOVWF  27
0D70:  MOVFF  21,2E
0D74:  MOVFF  20,2D
0D78:  MOVFF  1F,2C
0D7C:  MOVFF  1E,2B
0D80:  CALL   031A
0D84:  BC    0D88
0D86:  BNZ   0D8C
....................             output_high(PIN_B3); 
0D88:  BSF    F8A.3
....................         }else{ 
0D8A:  BRA    0D8E
....................             output_high(PIN_B4); 
0D8C:  BSF    F8A.4
....................         } 
....................          
....................         delay_ms(500); 
0D8E:  MOVLW  02
0D90:  MOVWF  23
0D92:  CLRF   16
0D94:  BTFSC  FF2.7
0D96:  BSF    16.7
0D98:  BCF    FF2.7
0D9A:  MOVLW  FA
0D9C:  MOVWF  3E
0D9E:  CALL   00C6
0DA2:  BTFSC  16.7
0DA4:  BSF    FF2.7
0DA6:  DECFSZ 23,F
0DA8:  BRA    0D92
....................          
....................         //**************** servo 1 (pasa a la otra banda) *************** 
....................         // brazo 90 grados 
....................         duty_50(PIN_C2, 1500, 15); 
0DAA:  MOVLW  12
0DAC:  MOVWF  23
0DAE:  MOVLW  05
0DB0:  MOVWF  25
0DB2:  MOVLW  DC
0DB4:  MOVWF  24
0DB6:  MOVLW  0F
0DB8:  MOVWF  26
0DBA:  RCALL  0A04
....................         duty_50(PIN_C2, 500, 15); 
0DBC:  MOVLW  12
0DBE:  MOVWF  23
0DC0:  MOVLW  01
0DC2:  MOVWF  25
0DC4:  MOVLW  F4
0DC6:  MOVWF  24
0DC8:  MOVLW  0F
0DCA:  MOVWF  26
0DCC:  RCALL  0A04
....................  
....................         // ************** Finaliza la primera etapa  ******************* 
....................         primera_etapa = false; 
0DCE:  BCF    22.0
0DD0:  CLRF   16
0DD2:  BTFSC  FF2.7
0DD4:  BSF    16.7
0DD6:  BCF    FF2.7
....................  
....................         correr_bandas_finales(); 
0DD8:  CALL   00EC
0DDC:  BTFSC  16.7
0DDE:  BSF    FF2.7
....................     
....................         subir_ascensor(); 
0DE0:  BRA    0A72
....................         delay_ms(500); 
0DE2:  MOVLW  02
0DE4:  MOVWF  23
0DE6:  CLRF   16
0DE8:  BTFSC  FF2.7
0DEA:  BSF    16.7
0DEC:  BCF    FF2.7
0DEE:  MOVLW  FA
0DF0:  MOVWF  3E
0DF2:  CALL   00C6
0DF6:  BTFSC  16.7
0DF8:  BSF    FF2.7
0DFA:  DECFSZ 23,F
0DFC:  BRA    0DE6
....................      
....................         // condicional para pesar las cajas  
....................         if (promedio >= 3.5) { 
0DFE:  CLRF   2A
0E00:  CLRF   29
0E02:  MOVLW  60
0E04:  MOVWF  28
0E06:  MOVLW  80
0E08:  MOVWF  27
0E0A:  MOVFF  21,2E
0E0E:  MOVFF  20,2D
0E12:  MOVFF  1F,2C
0E16:  MOVFF  1E,2B
0E1A:  CALL   031A
0E1E:  BC    0E22
0E20:  BNZ   0E48
....................             // bazo cajas pesadas 
....................             duty_50(PIN_C1, 500, 60); 
0E22:  MOVLW  11
0E24:  MOVWF  23
0E26:  MOVLW  01
0E28:  MOVWF  25
0E2A:  MOVLW  F4
0E2C:  MOVWF  24
0E2E:  MOVLW  3C
0E30:  MOVWF  26
0E32:  RCALL  0A04
....................             duty_50(PIN_C1, 2500, 60); 
0E34:  MOVLW  11
0E36:  MOVWF  23
0E38:  MOVLW  09
0E3A:  MOVWF  25
0E3C:  MOVLW  C4
0E3E:  MOVWF  24
0E40:  MOVLW  3C
0E42:  MOVWF  26
0E44:  RCALL  0A04
....................         } else { 
0E46:  BRA    0E6C
....................             // bazo cajas livianas 
....................             duty_50(PIN_C0, 500, 60); 
0E48:  MOVLW  10
0E4A:  MOVWF  23
0E4C:  MOVLW  01
0E4E:  MOVWF  25
0E50:  MOVLW  F4
0E52:  MOVWF  24
0E54:  MOVLW  3C
0E56:  MOVWF  26
0E58:  RCALL  0A04
....................             duty_50(PIN_C0, 2500, 60); 
0E5A:  MOVLW  10
0E5C:  MOVWF  23
0E5E:  MOVLW  09
0E60:  MOVWF  25
0E62:  MOVLW  C4
0E64:  MOVWF  24
0E66:  MOVLW  3C
0E68:  MOVWF  26
0E6A:  RCALL  0A04
0E6C:  CLRF   16
0E6E:  BTFSC  FF2.7
0E70:  BSF    16.7
0E72:  BCF    FF2.7
....................         } 
....................      
....................         correr_bandas_finales(); 
0E74:  CALL   00EC
0E78:  BTFSC  16.7
0E7A:  BSF    FF2.7
....................         bajar_ascensor(); 
0E7C:  BRA    0B3A
0E7E:  BRA    0C38
....................     } 
.................... } 
0E80:  SLEEP 

Configuration Fuses:
   Word  1: C827   PLL12 CPUDIV1 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
