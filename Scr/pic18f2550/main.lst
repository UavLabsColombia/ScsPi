CCS PCH C Compiler, Version 5.015, 5967               18-dic.-17 15:03

               Filename:   C:\Users\Andres\Documents\GitHub\ScsPi\Scr\pic18f2550\main.lst

               ROM used:   1632 bytes (5%)
                           Largest free fragment is 31132
               RAM used:   29 (1%) at main() level
                           64 (3%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   0528
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   00D4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Convertidor de Analogo a Digital 
.................... #include <18F2550.h> 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
*
00EA:  DATA 37,37
00EC:  DATA 37,37
00EE:  DATA 37,37
00F0:  DATA 00,00
*
0112:  MOVLW  8E
0114:  MOVWF  00
0116:  MOVFF  26,01
011A:  MOVFF  25,02
011E:  CLRF   03
0120:  MOVF   01,F
0122:  BNZ   0136
0124:  MOVFF  02,01
0128:  CLRF   02
012A:  MOVLW  08
012C:  SUBWF  00,F
012E:  MOVF   01,F
0130:  BNZ   0136
0132:  CLRF   00
0134:  BRA    0146
0136:  BCF    FD8.0
0138:  BTFSC  01.7
013A:  BRA    0144
013C:  RLCF   02,F
013E:  RLCF   01,F
0140:  DECF   00,F
0142:  BRA    0136
0144:  BCF    01.7
0146:  GOTO   05B2 (RETURN)
014A:  MOVF   32,W
014C:  BTFSC  FD8.2
014E:  BRA    0232
0150:  MOVWF  00
0152:  MOVF   36,W
0154:  BTFSC  FD8.2
0156:  BRA    0232
0158:  ADDWF  00,F
015A:  BNC   0164
015C:  MOVLW  81
015E:  ADDWF  00,F
0160:  BC    0232
0162:  BRA    016C
0164:  MOVLW  7F
0166:  SUBWF  00,F
0168:  BNC   0232
016A:  BZ    0232
016C:  MOVFF  33,3A
0170:  MOVF   37,W
0172:  XORWF  3A,F
0174:  BSF    33.7
0176:  BSF    37.7
0178:  MOVF   35,W
017A:  MULWF  39
017C:  MOVFF  FF4,3C
0180:  MOVF   34,W
0182:  MULWF  38
0184:  MOVFF  FF4,03
0188:  MOVFF  FF3,3B
018C:  MULWF  39
018E:  MOVF   FF3,W
0190:  ADDWF  3C,F
0192:  MOVF   FF4,W
0194:  ADDWFC 3B,F
0196:  MOVLW  00
0198:  ADDWFC 03,F
019A:  MOVF   35,W
019C:  MULWF  38
019E:  MOVF   FF3,W
01A0:  ADDWF  3C,F
01A2:  MOVF   FF4,W
01A4:  ADDWFC 3B,F
01A6:  MOVLW  00
01A8:  CLRF   02
01AA:  ADDWFC 03,F
01AC:  ADDWFC 02,F
01AE:  MOVF   33,W
01B0:  MULWF  39
01B2:  MOVF   FF3,W
01B4:  ADDWF  3B,F
01B6:  MOVF   FF4,W
01B8:  ADDWFC 03,F
01BA:  MOVLW  00
01BC:  ADDWFC 02,F
01BE:  MOVF   33,W
01C0:  MULWF  38
01C2:  MOVF   FF3,W
01C4:  ADDWF  03,F
01C6:  MOVF   FF4,W
01C8:  ADDWFC 02,F
01CA:  MOVLW  00
01CC:  CLRF   01
01CE:  ADDWFC 01,F
01D0:  MOVF   35,W
01D2:  MULWF  37
01D4:  MOVF   FF3,W
01D6:  ADDWF  3B,F
01D8:  MOVF   FF4,W
01DA:  ADDWFC 03,F
01DC:  MOVLW  00
01DE:  ADDWFC 02,F
01E0:  ADDWFC 01,F
01E2:  MOVF   34,W
01E4:  MULWF  37
01E6:  MOVF   FF3,W
01E8:  ADDWF  03,F
01EA:  MOVF   FF4,W
01EC:  ADDWFC 02,F
01EE:  MOVLW  00
01F0:  ADDWFC 01,F
01F2:  MOVF   33,W
01F4:  MULWF  37
01F6:  MOVF   FF3,W
01F8:  ADDWF  02,F
01FA:  MOVF   FF4,W
01FC:  ADDWFC 01,F
01FE:  INCF   00,F
0200:  BTFSC  01.7
0202:  BRA    020E
0204:  RLCF   3B,F
0206:  RLCF   03,F
0208:  RLCF   02,F
020A:  RLCF   01,F
020C:  DECF   00,F
020E:  MOVLW  00
0210:  BTFSS  3B.7
0212:  BRA    0228
0214:  INCF   03,F
0216:  ADDWFC 02,F
0218:  ADDWFC 01,F
021A:  MOVF   01,W
021C:  BNZ   0228
021E:  MOVF   02,W
0220:  BNZ   0228
0222:  MOVF   03,W
0224:  BNZ   0228
0226:  INCF   00,F
0228:  BTFSC  3A.7
022A:  BSF    01.7
022C:  BTFSS  3A.7
022E:  BCF    01.7
0230:  BRA    023A
0232:  CLRF   00
0234:  CLRF   01
0236:  CLRF   02
0238:  CLRF   03
023A:  RETURN 0
023C:  MOVFF  26,2D
0240:  MOVF   2A,W
0242:  XORWF  2D,F
0244:  BTFSS  2D.7
0246:  BRA    0252
0248:  BCF    FD8.2
024A:  BCF    FD8.0
024C:  BTFSC  26.7
024E:  BSF    FD8.0
0250:  BRA    02B0
0252:  MOVFF  26,2D
0256:  MOVFF  29,2E
025A:  MOVF   25,W
025C:  SUBWF  2E,F
025E:  BZ    026C
0260:  BTFSS  2D.7
0262:  BRA    02B0
0264:  MOVF   FD8,W
0266:  XORLW  01
0268:  MOVWF  FD8
026A:  BRA    02B0
026C:  MOVFF  2A,2E
0270:  MOVF   26,W
0272:  SUBWF  2E,F
0274:  BZ    0282
0276:  BTFSS  2D.7
0278:  BRA    02B0
027A:  MOVF   FD8,W
027C:  XORLW  01
027E:  MOVWF  FD8
0280:  BRA    02B0
0282:  MOVFF  2B,2E
0286:  MOVF   27,W
0288:  SUBWF  2E,F
028A:  BZ    0298
028C:  BTFSS  2D.7
028E:  BRA    02B0
0290:  MOVF   FD8,W
0292:  XORLW  01
0294:  MOVWF  FD8
0296:  BRA    02B0
0298:  MOVFF  2C,2E
029C:  MOVF   28,W
029E:  SUBWF  2E,F
02A0:  BZ    02AE
02A2:  BTFSS  2D.7
02A4:  BRA    02B0
02A6:  MOVF   FD8,W
02A8:  XORLW  01
02AA:  MOVWF  FD8
02AC:  BRA    02B0
02AE:  BCF    FD8.0
02B0:  GOTO   0600 (RETURN)
02B4:  TBLRD*+
02B6:  MOVF   FF5,F
02B8:  BZ    02D4
02BA:  MOVFF  FF6,25
02BE:  MOVFF  FF7,26
02C2:  MOVF   FF5,W
02C4:  BTFSS  F9E.4
02C6:  BRA    02C4
02C8:  MOVWF  FAD
02CA:  MOVFF  25,FF6
02CE:  MOVFF  26,FF7
02D2:  BRA    02B4
02D4:  GOTO   0630 (RETURN)
02D8:  MOVF   32,W
02DA:  SUBLW  B6
02DC:  MOVWF  32
02DE:  CLRF   03
02E0:  MOVFF  33,36
02E4:  BSF    33.7
02E6:  BCF    FD8.0
02E8:  RRCF   33,F
02EA:  RRCF   34,F
02EC:  RRCF   35,F
02EE:  RRCF   03,F
02F0:  RRCF   02,F
02F2:  RRCF   01,F
02F4:  RRCF   00,F
02F6:  DECFSZ 32,F
02F8:  BRA    02E6
02FA:  BTFSS  36.7
02FC:  BRA    0314
02FE:  COMF   00,F
0300:  COMF   01,F
0302:  COMF   02,F
0304:  COMF   03,F
0306:  INCF   00,F
0308:  BTFSC  FD8.2
030A:  INCF   01,F
030C:  BTFSC  FD8.2
030E:  INCF   02,F
0310:  BTFSC  FD8.2
0312:  INCF   03,F
0314:  GOTO   03F4 (RETURN)
0318:  BTFSC  FD8.1
031A:  BRA    0322
031C:  CLRF   FEA
031E:  MOVLW  3A
0320:  MOVWF  FE9
0322:  CLRF   00
0324:  CLRF   01
0326:  CLRF   02
0328:  CLRF   03
032A:  CLRF   3A
032C:  CLRF   3B
032E:  CLRF   3C
0330:  CLRF   3D
0332:  MOVF   39,W
0334:  IORWF  38,W
0336:  IORWF  37,W
0338:  IORWF  36,W
033A:  BZ    0394
033C:  MOVLW  20
033E:  MOVWF  3E
0340:  BCF    FD8.0
0342:  RLCF   32,F
0344:  RLCF   33,F
0346:  RLCF   34,F
0348:  RLCF   35,F
034A:  RLCF   3A,F
034C:  RLCF   3B,F
034E:  RLCF   3C,F
0350:  RLCF   3D,F
0352:  MOVF   39,W
0354:  SUBWF  3D,W
0356:  BNZ   0368
0358:  MOVF   38,W
035A:  SUBWF  3C,W
035C:  BNZ   0368
035E:  MOVF   37,W
0360:  SUBWF  3B,W
0362:  BNZ   0368
0364:  MOVF   36,W
0366:  SUBWF  3A,W
0368:  BNC   0388
036A:  MOVF   36,W
036C:  SUBWF  3A,F
036E:  MOVF   37,W
0370:  BTFSS  FD8.0
0372:  INCFSZ 37,W
0374:  SUBWF  3B,F
0376:  MOVF   38,W
0378:  BTFSS  FD8.0
037A:  INCFSZ 38,W
037C:  SUBWF  3C,F
037E:  MOVF   39,W
0380:  BTFSS  FD8.0
0382:  INCFSZ 39,W
0384:  SUBWF  3D,F
0386:  BSF    FD8.0
0388:  RLCF   00,F
038A:  RLCF   01,F
038C:  RLCF   02,F
038E:  RLCF   03,F
0390:  DECFSZ 3E,F
0392:  BRA    0340
0394:  MOVFF  3A,FEF
0398:  MOVFF  3B,FEC
039C:  MOVFF  3C,FEC
03A0:  MOVFF  3D,FEC
03A4:  RETURN 0
03A6:  MOVF   FE9,W
03A8:  MOVWF  2A
03AA:  MOVF   29,W
03AC:  MOVWF  2C
03AE:  BZ    03E2
03B0:  MOVFF  28,35
03B4:  MOVFF  27,34
03B8:  MOVFF  26,33
03BC:  MOVFF  25,32
03C0:  CLRF   39
03C2:  CLRF   38
03C4:  MOVLW  20
03C6:  MOVWF  37
03C8:  MOVLW  82
03CA:  MOVWF  36
03CC:  RCALL  014A
03CE:  MOVFF  03,28
03D2:  MOVFF  02,27
03D6:  MOVFF  01,26
03DA:  MOVFF  00,25
03DE:  DECFSZ 2C,F
03E0:  BRA    03B0
03E2:  MOVFF  28,35
03E6:  MOVFF  27,34
03EA:  MOVFF  26,33
03EE:  MOVFF  25,32
03F2:  BRA    02D8
03F4:  MOVFF  03,28
03F8:  MOVFF  02,27
03FC:  MOVFF  01,26
0400:  MOVFF  00,25
0404:  BTFSS  28.7
0406:  BRA    0422
0408:  DECF   2A,F
040A:  BSF    2A.5
040C:  COMF   25,F
040E:  COMF   26,F
0410:  COMF   27,F
0412:  COMF   28,F
0414:  INCF   25,F
0416:  BTFSC  FD8.2
0418:  INCF   26,F
041A:  BTFSC  FD8.2
041C:  INCF   27,F
041E:  BTFSC  FD8.2
0420:  INCF   28,F
0422:  MOVLW  3B
0424:  MOVWF  31
0426:  MOVLW  9A
0428:  MOVWF  30
042A:  MOVLW  CA
042C:  MOVWF  2F
042E:  CLRF   2E
0430:  MOVLW  0A
0432:  MOVWF  2C
0434:  MOVF   29,W
0436:  BTFSC  FD8.2
0438:  INCF   2A,F
043A:  BSF    FD8.1
043C:  CLRF   FEA
043E:  MOVLW  25
0440:  MOVWF  FE9
0442:  MOVFF  28,35
0446:  MOVFF  27,34
044A:  MOVFF  26,33
044E:  MOVFF  25,32
0452:  MOVFF  31,39
0456:  MOVFF  30,38
045A:  MOVFF  2F,37
045E:  MOVFF  2E,36
0462:  RCALL  0318
0464:  MOVF   01,W
0466:  MOVF   00,F
0468:  BNZ   0488
046A:  INCF   29,W
046C:  SUBWF  2C,W
046E:  BZ    0488
0470:  MOVF   2A,W
0472:  BZ    048C
0474:  ANDLW  0F
0476:  SUBWF  2C,W
0478:  BZ    047C
047A:  BC    04F2
047C:  BTFSC  2A.7
047E:  BRA    04F2
0480:  BTFSC  2A.6
0482:  BRA    048C
0484:  MOVLW  20
0486:  BRA    04E8
0488:  MOVLW  20
048A:  ANDWF  2A,F
048C:  BTFSS  2A.5
048E:  BRA    04AA
0490:  BCF    2A.5
0492:  MOVF   29,W
0494:  BTFSS  FD8.2
0496:  DECF   2A,F
0498:  MOVF   00,W
049A:  MOVWF  2A
049C:  MOVLW  2D
049E:  BTFSS  F9E.4
04A0:  BRA    049E
04A2:  MOVWF  FAD
04A4:  MOVF   2A,W
04A6:  MOVWF  00
04A8:  CLRF   2A
04AA:  MOVF   29,W
04AC:  SUBWF  2C,W
04AE:  BNZ   04C6
04B0:  MOVF   00,W
04B2:  MOVWF  2A
04B4:  MOVLW  2E
04B6:  BTFSS  F9E.4
04B8:  BRA    04B6
04BA:  MOVWF  FAD
04BC:  MOVF   2A,W
04BE:  MOVWF  00
04C0:  MOVLW  20
04C2:  ANDWF  2A,F
04C4:  MOVLW  00
04C6:  MOVLW  30
04C8:  BTFSS  2A.5
04CA:  BRA    04E8
04CC:  BCF    2A.5
04CE:  MOVF   29,W
04D0:  BTFSS  FD8.2
04D2:  DECF   2A,F
04D4:  MOVF   00,W
04D6:  MOVWF  2A
04D8:  MOVLW  2D
04DA:  BTFSS  F9E.4
04DC:  BRA    04DA
04DE:  MOVWF  FAD
04E0:  MOVF   2A,W
04E2:  MOVWF  00
04E4:  CLRF   2A
04E6:  MOVLW  30
04E8:  ADDWF  00,F
04EA:  MOVF   00,W
04EC:  BTFSS  F9E.4
04EE:  BRA    04EC
04F0:  MOVWF  FAD
04F2:  BCF    FD8.1
04F4:  MOVFF  31,35
04F8:  MOVFF  30,34
04FC:  MOVFF  2F,33
0500:  MOVFF  2E,32
0504:  CLRF   39
0506:  CLRF   38
0508:  CLRF   37
050A:  MOVLW  0A
050C:  MOVWF  36
050E:  RCALL  0318
0510:  MOVFF  03,31
0514:  MOVFF  02,30
0518:  MOVFF  01,2F
051C:  MOVFF  00,2E
0520:  DECFSZ 2C,F
0522:  BRA    043A
0524:  GOTO   0658 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses xt, nowdt, noprotect, put, CPUDIV1 
.................... // Numero de bits a utilizar sobre el convertidor analogo 
.................... #device adc = 10 
.................... #use delay(internal = 8000000) 
*
00AE:  CLRF   FEA
00B0:  MOVLW  3F
00B2:  MOVWF  FE9
00B4:  MOVF   FEF,W
00B6:  BZ    00D2
00B8:  MOVLW  02
00BA:  MOVWF  01
00BC:  CLRF   00
00BE:  DECFSZ 00,F
00C0:  BRA    00BE
00C2:  DECFSZ 01,F
00C4:  BRA    00BC
00C6:  MOVLW  97
00C8:  MOVWF  00
00CA:  DECFSZ 00,F
00CC:  BRA    00CA
00CE:  DECFSZ FEF,F
00D0:  BRA    00B8
00D2:  RETURN 0
.................... #use rs232(baud = 9600, bits = 8, parity = N, xmit = PIN_C6, RCV = PIN_C7, stop=1, ERRORS) 
*
0096:  BTFSS  F9E.5
0098:  BRA    0096
009A:  MOVFF  FAB,17
009E:  MOVFF  FAE,01
00A2:  BTFSS  17.1
00A4:  BRA    00AA
00A6:  BCF    FAB.4
00A8:  BSF    FAB.4
00AA:  GOTO   00DA (RETURN)
....................  
.................... #use fast_io(b) 
.................... #use fast_io(a) 
....................  
.................... // Variables Globales 
.................... // calculo de la resulucion en la salida 
.................... float resolucion = (float)5 / (float)1023; 
.................... char dato_recibido = '0'; 
....................  
.................... // Se define el puerto ADC a utilizar y sus pines. 
.................... void define_puertos() { 
....................   
....................   // Define el pin b7 como entrada y el resto del puerto como salidas 
....................   //bin: 1000 0000 
....................   set_tris_b(0x80); 
*
00F2:  MOVLW  80
00F4:  MOVWF  F93
....................    
....................   // define la entrada 0 del puerto a como entrada 
....................   //bin: 0000 0001 
....................   set_tris_a(0x01); 
00F6:  MOVLW  01
00F8:  MOVWF  F92
....................  
....................   // Define como entradas analoga el puerto AN0 
....................   SETUP_ADC_PORTS(AN0); 
00FA:  MOVF   FC1,W
00FC:  ANDLW  C0
00FE:  IORLW  0E
0100:  MOVWF  FC1
....................  
....................   // Define el relog interno para el uso del ADC 
....................   SETUP_ADC(ADC_CLOCK_INTERNAL); 
0102:  MOVF   FC0,W
0104:  ANDLW  C0
0106:  IORLW  07
0108:  MOVWF  FC0
010A:  BSF    FC0.7
010C:  BSF    FC2.0
010E:  GOTO   056C (RETURN)
.................... } 
....................  
.................... //interrumcion de llegada de datos 
.................... #int_rda 
.................... void rb_isr() 
.................... { 
....................    if(kbhit()) 
*
00D4:  BTFSS  F9E.5
00D6:  BRA    00E4
....................    { 
....................       dato_recibido = getc(); 
00D8:  BRA    0096
00DA:  MOVFF  01,1C
....................       delay_ms(4); 
00DE:  MOVLW  04
00E0:  MOVWF  3F
00E2:  RCALL  00AE
....................       //printf("ultimo dato recibido %c \n" getc()); 
....................    } 
00E4:  BCF    F9E.5
00E6:  GOTO   0054
.................... } 
....................  
....................  
....................  
.................... void main() { 
*
0528:  CLRF   FF8
052A:  BCF    FD0.7
052C:  BSF    07.7
052E:  MOVLW  70
0530:  MOVWF  FD3
0532:  MOVF   FD3,W
0534:  CLRF   17
0536:  BCF    FB8.3
0538:  MOVLW  0C
053A:  MOVWF  FAF
053C:  MOVLW  A2
053E:  MOVWF  FAC
0540:  MOVLW  90
0542:  MOVWF  FAB
0544:  MOVLW  0A
0546:  MOVWF  1B
0548:  MOVLW  28
054A:  MOVWF  1A
054C:  MOVLW  20
054E:  MOVWF  19
0550:  MOVLW  77
0552:  MOVWF  18
0554:  MOVLW  30
0556:  MOVWF  1C
0558:  MOVF   FC1,W
055A:  ANDLW  C0
055C:  IORLW  0F
055E:  MOVWF  FC1
0560:  MOVLW  07
0562:  MOVWF  FB4
....................    //habilita las interrupciones 
....................    enable_interrupts(int_rda); 
0564:  BSF    F9D.5
....................    enable_interrupts(global); 
0566:  MOVLW  C0
0568:  IORWF  FF2,F
....................     
....................   // configura los puertos 
....................   define_puertos(); 
056A:  BRA    00F2
....................  
....................   int16 Valor = 0; 
....................   float ValorADC = 0; 
056C:  CLRF   1E
056E:  CLRF   1D
0570:  CLRF   22
0572:  CLRF   21
0574:  CLRF   20
0576:  CLRF   1F
....................   SET_ADC_CHANNEL(0); 
0578:  MOVLW  00
057A:  MOVWF  01
057C:  MOVF   FC2,W
057E:  ANDLW  C3
0580:  IORWF  01,W
0582:  MOVWF  FC2
....................  
....................    int16 tempo = 0; 
0584:  CLRF   24
0586:  CLRF   23
0588:  CLRF   16
058A:  BTFSC  FF2.7
058C:  BSF    16.7
058E:  BCF    FF2.7
....................   while (true) { 
....................     delay_ms(5); 
0590:  MOVLW  05
0592:  MOVWF  3F
0594:  RCALL  00AE
0596:  BTFSC  16.7
0598:  BSF    FF2.7
....................     // Lee el puerto Analogo 
....................     Valor = READ_ADC(); 
059A:  BSF    FC2.1
059C:  BTFSC  FC2.1
059E:  BRA    059C
05A0:  MOVFF  FC3,1D
05A4:  MOVFF  FC4,1E
....................     // output_toggle(PIN_B1); 
....................     ValorADC = resolucion * (float)Valor; 
05A8:  MOVFF  1E,26
05AC:  MOVFF  1D,25
05B0:  BRA    0112
05B2:  MOVFF  1B,35
05B6:  MOVFF  1A,34
05BA:  MOVFF  19,33
05BE:  MOVFF  18,32
05C2:  MOVFF  03,39
05C6:  MOVFF  02,38
05CA:  MOVFF  01,37
05CE:  MOVFF  00,36
05D2:  RCALL  014A
05D4:  MOVFF  03,22
05D8:  MOVFF  02,21
05DC:  MOVFF  01,20
05E0:  MOVFF  00,1F
....................  
....................  
.................... //********  borrar start 
....................     if (ValorADC > 1.0f) { 
05E4:  CLRF   28
05E6:  CLRF   27
05E8:  CLRF   26
05EA:  MOVLW  7F
05EC:  MOVWF  25
05EE:  MOVFF  22,2C
05F2:  MOVFF  21,2B
05F6:  MOVFF  20,2A
05FA:  MOVFF  1F,29
05FE:  BRA    023C
0600:  BNC   0606
....................       output_high(PIN_B1); 
0602:  BSF    F8A.1
....................       //delay_ms(500); 
....................     } else { 
0604:  BRA    0608
....................       output_low(PIN_B1); 
0606:  BCF    F8A.1
....................       //delay_ms(500); 
....................     } 
.................... //********  borrar end 
....................      
....................  
....................     if(dato_recibido == '1'){ 
0608:  MOVF   1C,W
060A:  SUBLW  31
060C:  BNZ   0612
....................       //start 
....................       output_high(PIN_B2); 
060E:  BSF    F8A.2
....................     }else if(dato_recibido == '0'){ 
0610:  BRA    0622
0612:  MOVF   1C,W
0614:  SUBLW  30
0616:  BNZ   061C
....................       //stopt 
....................       output_low(PIN_B2); 
0618:  BCF    F8A.2
....................     }else if(dato_recibido == '2'){ 
061A:  BRA    0622
061C:  MOVF   1C,W
061E:  SUBLW  32
0620:  BNZ   0622
....................      //reset 
....................      //codigo para reset  
....................       
....................     } 
....................      
....................     if(input(PIN_B7)){ 
0622:  BTFSS  F81.7
0624:  BRA    0630
....................       printf("777777"); 
0626:  MOVLW  EA
0628:  MOVWF  FF6
062A:  MOVLW  00
062C:  MOVWF  FF7
062E:  BRA    02B4
....................     } 
....................  
....................     // 5ms * 200 = 1s 
....................     if(tempo == 200){ 
0630:  MOVF   23,W
0632:  SUBLW  C8
0634:  BNZ   065A
0636:  MOVF   24,F
0638:  BNZ   065A
....................       tempo = 0; 
063A:  CLRF   24
063C:  CLRF   23
....................       //printf("%c.1111", dato_recibido); 
....................       printf("%1.4f", ValorADC); 
063E:  MOVLW  89
0640:  MOVWF  FE9
0642:  MOVFF  22,28
0646:  MOVFF  21,27
064A:  MOVFF  20,26
064E:  MOVFF  1F,25
0652:  MOVLW  04
0654:  MOVWF  29
0656:  BRA    03A6
....................       output_toggle(PIN_B1); 
0658:  BTG    F8A.1
....................     } 
....................     tempo ++; 
065A:  INCF   23,F
065C:  BTFSC  FD8.2
065E:  INCF   24,F
0660:  BRA    0588
....................      
....................   } 
.................... } 
0662:  SLEEP 

Configuration Fuses:
   Word  1: C827   PLL12 CPUDIV1 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
