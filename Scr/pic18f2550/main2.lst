CCS PCH C Compiler, Version 5.015, 5967               20-dic.-17 17:16

               Filename:   C:\Users\Andres\Documents\GitHub\ScsPi\Scr\pic18f2550new\main2.lst

               ROM used:   3908 bytes (12%)
                           Largest free fragment is 28856
               RAM used:   39 (2%) at main() level
                           63 (3%) worst case
               Stack used: 5 locations (2 in main + 3 for interrupts)
               Stack size: 31

*
0000:  GOTO   0B28
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.3
004A:  GOTO   0054
004E:  BTFSC  FF2.0
0050:  GOTO   0120
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   015A
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Convertidor de Analogo a Digital 
.................... #include <18F2550.h> 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
00A2:  TBLRD*+
00A4:  MOVF   FF5,F
00A6:  BZ    00C2
00A8:  MOVFF  FF6,3D
00AC:  MOVFF  FF7,3E
00B0:  MOVF   FF5,W
00B2:  BTFSS  F9E.4
00B4:  BRA    00B2
00B6:  MOVWF  FAD
00B8:  MOVFF  3D,FF6
00BC:  MOVFF  3E,FF7
00C0:  BRA    00A2
00C2:  GOTO   012E (RETURN)
*
013A:  DATA 37,2E
013C:  DATA 30,30
013E:  DATA 30,30
0140:  DATA 00,00
*
01A8:  MOVLW  8E
01AA:  MOVWF  00
01AC:  MOVFF  24,01
01B0:  MOVFF  23,02
01B4:  CLRF   03
01B6:  MOVF   01,F
01B8:  BNZ   01CC
01BA:  MOVFF  02,01
01BE:  CLRF   02
01C0:  MOVLW  08
01C2:  SUBWF  00,F
01C4:  MOVF   01,F
01C6:  BNZ   01CC
01C8:  CLRF   00
01CA:  BRA    01DC
01CC:  BCF    FD8.0
01CE:  BTFSC  01.7
01D0:  BRA    01DA
01D2:  RLCF   02,F
01D4:  RLCF   01,F
01D6:  DECF   00,F
01D8:  BRA    01CC
01DA:  BCF    01.7
01DC:  GOTO   02E6 (RETURN)
01E0:  MOVF   30,W
01E2:  BTFSC  FD8.2
01E4:  BRA    02C8
01E6:  MOVWF  00
01E8:  MOVF   34,W
01EA:  BTFSC  FD8.2
01EC:  BRA    02C8
01EE:  ADDWF  00,F
01F0:  BNC   01FA
01F2:  MOVLW  81
01F4:  ADDWF  00,F
01F6:  BC    02C8
01F8:  BRA    0202
01FA:  MOVLW  7F
01FC:  SUBWF  00,F
01FE:  BNC   02C8
0200:  BZ    02C8
0202:  MOVFF  31,38
0206:  MOVF   35,W
0208:  XORWF  38,F
020A:  BSF    31.7
020C:  BSF    35.7
020E:  MOVF   33,W
0210:  MULWF  37
0212:  MOVFF  FF4,3A
0216:  MOVF   32,W
0218:  MULWF  36
021A:  MOVFF  FF4,03
021E:  MOVFF  FF3,39
0222:  MULWF  37
0224:  MOVF   FF3,W
0226:  ADDWF  3A,F
0228:  MOVF   FF4,W
022A:  ADDWFC 39,F
022C:  MOVLW  00
022E:  ADDWFC 03,F
0230:  MOVF   33,W
0232:  MULWF  36
0234:  MOVF   FF3,W
0236:  ADDWF  3A,F
0238:  MOVF   FF4,W
023A:  ADDWFC 39,F
023C:  MOVLW  00
023E:  CLRF   02
0240:  ADDWFC 03,F
0242:  ADDWFC 02,F
0244:  MOVF   31,W
0246:  MULWF  37
0248:  MOVF   FF3,W
024A:  ADDWF  39,F
024C:  MOVF   FF4,W
024E:  ADDWFC 03,F
0250:  MOVLW  00
0252:  ADDWFC 02,F
0254:  MOVF   31,W
0256:  MULWF  36
0258:  MOVF   FF3,W
025A:  ADDWF  03,F
025C:  MOVF   FF4,W
025E:  ADDWFC 02,F
0260:  MOVLW  00
0262:  CLRF   01
0264:  ADDWFC 01,F
0266:  MOVF   33,W
0268:  MULWF  35
026A:  MOVF   FF3,W
026C:  ADDWF  39,F
026E:  MOVF   FF4,W
0270:  ADDWFC 03,F
0272:  MOVLW  00
0274:  ADDWFC 02,F
0276:  ADDWFC 01,F
0278:  MOVF   32,W
027A:  MULWF  35
027C:  MOVF   FF3,W
027E:  ADDWF  03,F
0280:  MOVF   FF4,W
0282:  ADDWFC 02,F
0284:  MOVLW  00
0286:  ADDWFC 01,F
0288:  MOVF   31,W
028A:  MULWF  35
028C:  MOVF   FF3,W
028E:  ADDWF  02,F
0290:  MOVF   FF4,W
0292:  ADDWFC 01,F
0294:  INCF   00,F
0296:  BTFSC  01.7
0298:  BRA    02A4
029A:  RLCF   39,F
029C:  RLCF   03,F
029E:  RLCF   02,F
02A0:  RLCF   01,F
02A2:  DECF   00,F
02A4:  MOVLW  00
02A6:  BTFSS  39.7
02A8:  BRA    02BE
02AA:  INCF   03,F
02AC:  ADDWFC 02,F
02AE:  ADDWFC 01,F
02B0:  MOVF   01,W
02B2:  BNZ   02BE
02B4:  MOVF   02,W
02B6:  BNZ   02BE
02B8:  MOVF   03,W
02BA:  BNZ   02BE
02BC:  INCF   00,F
02BE:  BTFSC  38.7
02C0:  BSF    01.7
02C2:  BTFSS  38.7
02C4:  BCF    01.7
02C6:  BRA    02D0
02C8:  CLRF   00
02CA:  CLRF   01
02CC:  CLRF   02
02CE:  CLRF   03
02D0:  RETURN 0
*
030A:  MOVFF  28,2F
030E:  MOVF   2C,W
0310:  XORWF  2F,F
0312:  BTFSS  2F.7
0314:  BRA    0320
0316:  BCF    FD8.2
0318:  BCF    FD8.0
031A:  BTFSC  28.7
031C:  BSF    FD8.0
031E:  BRA    037E
0320:  MOVFF  28,2F
0324:  MOVFF  2B,30
0328:  MOVF   27,W
032A:  SUBWF  30,F
032C:  BZ    033A
032E:  BTFSS  2F.7
0330:  BRA    037E
0332:  MOVF   FD8,W
0334:  XORLW  01
0336:  MOVWF  FD8
0338:  BRA    037E
033A:  MOVFF  2C,30
033E:  MOVF   28,W
0340:  SUBWF  30,F
0342:  BZ    0350
0344:  BTFSS  2F.7
0346:  BRA    037E
0348:  MOVF   FD8,W
034A:  XORLW  01
034C:  MOVWF  FD8
034E:  BRA    037E
0350:  MOVFF  2D,30
0354:  MOVF   29,W
0356:  SUBWF  30,F
0358:  BZ    0366
035A:  BTFSS  2F.7
035C:  BRA    037E
035E:  MOVF   FD8,W
0360:  XORLW  01
0362:  MOVWF  FD8
0364:  BRA    037E
0366:  MOVFF  2E,30
036A:  MOVF   2A,W
036C:  SUBWF  30,F
036E:  BZ    037C
0370:  BTFSS  2F.7
0372:  BRA    037E
0374:  MOVF   FD8,W
0376:  XORLW  01
0378:  MOVWF  FD8
037A:  BRA    037E
037C:  BCF    FD8.0
037E:  RETURN 0
0380:  MOVLW  80
0382:  BTFSC  FD8.1
0384:  XORWF  2A,F
0386:  CLRF   2F
0388:  CLRF   30
038A:  MOVFF  26,2E
038E:  MOVF   2A,W
0390:  XORWF  2E,F
0392:  MOVF   25,W
0394:  BTFSC  FD8.2
0396:  BRA    0550
0398:  MOVWF  2D
039A:  MOVWF  00
039C:  MOVF   29,W
039E:  BTFSC  FD8.2
03A0:  BRA    0562
03A2:  SUBWF  2D,F
03A4:  BTFSC  FD8.2
03A6:  BRA    04AA
03A8:  BNC   0424
03AA:  MOVFF  2A,33
03AE:  BSF    33.7
03B0:  MOVFF  2B,32
03B4:  MOVFF  2C,31
03B8:  CLRF   30
03BA:  BCF    FD8.0
03BC:  RRCF   33,F
03BE:  RRCF   32,F
03C0:  RRCF   31,F
03C2:  RRCF   30,F
03C4:  DECFSZ 2D,F
03C6:  BRA    03B8
03C8:  BTFSS  2E.7
03CA:  BRA    03D2
03CC:  BSF    2F.0
03CE:  BRA    058A
03D0:  BCF    2F.0
03D2:  BCF    2D.0
03D4:  BSF    2F.4
03D6:  CLRF   FEA
03D8:  MOVLW  28
03DA:  MOVWF  FE9
03DC:  BRA    05B0
03DE:  BCF    2F.4
03E0:  BTFSC  2E.7
03E2:  BRA    03F8
03E4:  BTFSS  2D.0
03E6:  BRA    040E
03E8:  RRCF   33,F
03EA:  RRCF   32,F
03EC:  RRCF   31,F
03EE:  RRCF   30,F
03F0:  INCF   00,F
03F2:  BTFSC  FD8.2
03F4:  BRA    0580
03F6:  BRA    040E
03F8:  BTFSC  33.7
03FA:  BRA    0414
03FC:  BCF    FD8.0
03FE:  RLCF   30,F
0400:  RLCF   31,F
0402:  RLCF   32,F
0404:  RLCF   33,F
0406:  DECF   00,F
0408:  BTFSC  FD8.2
040A:  BRA    0580
040C:  BRA    03F8
040E:  BSF    2F.6
0410:  BRA    04E8
0412:  BCF    2F.6
0414:  MOVFF  26,2E
0418:  BTFSS  26.7
041A:  BRA    0420
041C:  BSF    33.7
041E:  BRA    0572
0420:  BCF    33.7
0422:  BRA    0572
0424:  MOVFF  29,2D
0428:  MOVFF  29,00
042C:  MOVF   25,W
042E:  SUBWF  2D,F
0430:  MOVFF  26,33
0434:  BSF    33.7
0436:  MOVFF  27,32
043A:  MOVFF  28,31
043E:  CLRF   30
0440:  BCF    FD8.0
0442:  RRCF   33,F
0444:  RRCF   32,F
0446:  RRCF   31,F
0448:  RRCF   30,F
044A:  DECFSZ 2D,F
044C:  BRA    043E
044E:  BTFSS  2E.7
0450:  BRA    0458
0452:  BSF    2F.1
0454:  BRA    058A
0456:  BCF    2F.1
0458:  BCF    2D.0
045A:  BSF    2F.5
045C:  CLRF   FEA
045E:  MOVLW  2C
0460:  MOVWF  FE9
0462:  BRA    05B0
0464:  BCF    2F.5
0466:  BTFSC  2E.7
0468:  BRA    047E
046A:  BTFSS  2D.0
046C:  BRA    0494
046E:  RRCF   33,F
0470:  RRCF   32,F
0472:  RRCF   31,F
0474:  RRCF   30,F
0476:  INCF   00,F
0478:  BTFSC  FD8.2
047A:  BRA    0580
047C:  BRA    0494
047E:  BTFSC  33.7
0480:  BRA    049A
0482:  BCF    FD8.0
0484:  RLCF   30,F
0486:  RLCF   31,F
0488:  RLCF   32,F
048A:  RLCF   33,F
048C:  DECF   00,F
048E:  BTFSC  FD8.2
0490:  BRA    0580
0492:  BRA    047E
0494:  BSF    2F.7
0496:  BRA    04E8
0498:  BCF    2F.7
049A:  MOVFF  2A,2E
049E:  BTFSS  2A.7
04A0:  BRA    04A6
04A2:  BSF    33.7
04A4:  BRA    0572
04A6:  BCF    33.7
04A8:  BRA    0572
04AA:  MOVFF  2A,33
04AE:  BSF    33.7
04B0:  MOVFF  2B,32
04B4:  MOVFF  2C,31
04B8:  BTFSS  2E.7
04BA:  BRA    04C4
04BC:  BCF    33.7
04BE:  BSF    2F.2
04C0:  BRA    058A
04C2:  BCF    2F.2
04C4:  CLRF   30
04C6:  BCF    2D.0
04C8:  CLRF   FEA
04CA:  MOVLW  28
04CC:  MOVWF  FE9
04CE:  BRA    05B0
04D0:  BTFSC  2E.7
04D2:  BRA    050C
04D4:  MOVFF  26,2E
04D8:  BTFSS  2D.0
04DA:  BRA    04E8
04DC:  RRCF   33,F
04DE:  RRCF   32,F
04E0:  RRCF   31,F
04E2:  RRCF   30,F
04E4:  INCF   00,F
04E6:  BZ    0580
04E8:  BTFSS  30.7
04EA:  BRA    0502
04EC:  INCF   31,F
04EE:  BNZ   0502
04F0:  INCF   32,F
04F2:  BNZ   0502
04F4:  INCF   33,F
04F6:  BNZ   0502
04F8:  RRCF   33,F
04FA:  RRCF   32,F
04FC:  RRCF   31,F
04FE:  INCF   00,F
0500:  BZ    0580
0502:  BTFSC  2F.6
0504:  BRA    0412
0506:  BTFSC  2F.7
0508:  BRA    0498
050A:  BRA    0544
050C:  MOVLW  80
050E:  XORWF  33,F
0510:  BTFSS  33.7
0512:  BRA    051C
0514:  BRA    058A
0516:  MOVFF  2A,2E
051A:  BRA    0530
051C:  MOVFF  26,2E
0520:  MOVF   33,F
0522:  BNZ   0530
0524:  MOVF   32,F
0526:  BNZ   0530
0528:  MOVF   31,F
052A:  BNZ   0530
052C:  CLRF   00
052E:  BRA    0572
0530:  BTFSC  33.7
0532:  BRA    0544
0534:  BCF    FD8.0
0536:  RLCF   30,F
0538:  RLCF   31,F
053A:  RLCF   32,F
053C:  RLCF   33,F
053E:  DECFSZ 00,F
0540:  BRA    0530
0542:  BRA    0580
0544:  BTFSS  2E.7
0546:  BRA    054C
0548:  BSF    33.7
054A:  BRA    0572
054C:  BCF    33.7
054E:  BRA    0572
0550:  MOVFF  29,00
0554:  MOVFF  2A,33
0558:  MOVFF  2B,32
055C:  MOVFF  2C,31
0560:  BRA    0572
0562:  MOVFF  25,00
0566:  MOVFF  26,33
056A:  MOVFF  27,32
056E:  MOVFF  28,31
0572:  MOVFF  33,01
0576:  MOVFF  32,02
057A:  MOVFF  31,03
057E:  BRA    05E8
0580:  CLRF   00
0582:  CLRF   01
0584:  CLRF   02
0586:  CLRF   03
0588:  BRA    05E8
058A:  CLRF   30
058C:  COMF   31,F
058E:  COMF   32,F
0590:  COMF   33,F
0592:  COMF   30,F
0594:  INCF   30,F
0596:  BNZ   05A2
0598:  INCF   31,F
059A:  BNZ   05A2
059C:  INCF   32,F
059E:  BNZ   05A2
05A0:  INCF   33,F
05A2:  BTFSC  2F.0
05A4:  BRA    03D0
05A6:  BTFSC  2F.1
05A8:  BRA    0456
05AA:  BTFSC  2F.2
05AC:  BRA    04C2
05AE:  BRA    0516
05B0:  MOVF   FEF,W
05B2:  ADDWF  31,F
05B4:  BNC   05C0
05B6:  INCF   32,F
05B8:  BNZ   05C0
05BA:  INCF   33,F
05BC:  BTFSC  FD8.2
05BE:  BSF    2D.0
05C0:  MOVF   FED,F
05C2:  MOVF   FEF,W
05C4:  ADDWF  32,F
05C6:  BNC   05CE
05C8:  INCF   33,F
05CA:  BTFSC  FD8.2
05CC:  BSF    2D.0
05CE:  MOVF   FED,F
05D0:  MOVF   FEF,W
05D2:  BTFSC  FEF.7
05D4:  BRA    05D8
05D6:  XORLW  80
05D8:  ADDWF  33,F
05DA:  BTFSC  FD8.0
05DC:  BSF    2D.0
05DE:  BTFSC  2F.4
05E0:  BRA    03DE
05E2:  BTFSC  2F.5
05E4:  BRA    0464
05E6:  BRA    04D0
05E8:  GOTO   0C52 (RETURN)
05EC:  MOVF   23,W
05EE:  BTFSC  FD8.2
05F0:  BRA    073C
05F2:  MOVWF  2F
05F4:  MOVF   27,W
05F6:  BTFSC  FD8.2
05F8:  BRA    073C
05FA:  SUBWF  2F,F
05FC:  BNC   0608
05FE:  MOVLW  7F
0600:  ADDWF  2F,F
0602:  BTFSC  FD8.0
0604:  BRA    073C
0606:  BRA    0614
0608:  MOVLW  81
060A:  SUBWF  2F,F
060C:  BTFSS  FD8.0
060E:  BRA    073C
0610:  BTFSC  FD8.2
0612:  BRA    073C
0614:  MOVFF  2F,00
0618:  CLRF   01
061A:  CLRF   02
061C:  CLRF   03
061E:  CLRF   2E
0620:  MOVFF  24,2D
0624:  BSF    2D.7
0626:  MOVFF  25,2C
062A:  MOVFF  26,2B
062E:  MOVLW  19
0630:  MOVWF  2F
0632:  MOVF   2A,W
0634:  SUBWF  2B,F
0636:  BC    0652
0638:  MOVLW  01
063A:  SUBWF  2C,F
063C:  BC    0652
063E:  SUBWF  2D,F
0640:  BC    0652
0642:  SUBWF  2E,F
0644:  BC    0652
0646:  INCF   2E,F
0648:  INCF   2D,F
064A:  INCF   2C,F
064C:  MOVF   2A,W
064E:  ADDWF  2B,F
0650:  BRA    06A2
0652:  MOVF   29,W
0654:  SUBWF  2C,F
0656:  BC    067C
0658:  MOVLW  01
065A:  SUBWF  2D,F
065C:  BC    067C
065E:  SUBWF  2E,F
0660:  BC    067C
0662:  INCF   2E,F
0664:  INCF   2D,F
0666:  MOVF   29,W
0668:  ADDWF  2C,F
066A:  MOVF   2A,W
066C:  ADDWF  2B,F
066E:  BNC   06A2
0670:  INCF   2C,F
0672:  BNZ   06A2
0674:  INCF   2D,F
0676:  BNZ   06A2
0678:  INCF   2E,F
067A:  BRA    06A2
067C:  MOVF   28,W
067E:  IORLW  80
0680:  SUBWF  2D,F
0682:  BC    06A0
0684:  MOVLW  01
0686:  SUBWF  2E,F
0688:  BC    06A0
068A:  INCF   2E,F
068C:  MOVF   28,W
068E:  IORLW  80
0690:  ADDWF  2D,F
0692:  MOVF   29,W
0694:  ADDWF  2C,F
0696:  BNC   066A
0698:  INCF   2D,F
069A:  BNZ   066A
069C:  INCF   2E,F
069E:  BRA    066A
06A0:  BSF    03.0
06A2:  DECFSZ 2F,F
06A4:  BRA    06A8
06A6:  BRA    06BE
06A8:  BCF    FD8.0
06AA:  RLCF   2B,F
06AC:  RLCF   2C,F
06AE:  RLCF   2D,F
06B0:  RLCF   2E,F
06B2:  BCF    FD8.0
06B4:  RLCF   03,F
06B6:  RLCF   02,F
06B8:  RLCF   01,F
06BA:  RLCF   30,F
06BC:  BRA    0632
06BE:  BTFSS  30.0
06C0:  BRA    06CE
06C2:  BCF    FD8.0
06C4:  RRCF   01,F
06C6:  RRCF   02,F
06C8:  RRCF   03,F
06CA:  RRCF   30,F
06CC:  BRA    06D2
06CE:  DECF   00,F
06D0:  BZ    073C
06D2:  BTFSC  30.7
06D4:  BRA    0712
06D6:  BCF    FD8.0
06D8:  RLCF   2B,F
06DA:  RLCF   2C,F
06DC:  RLCF   2D,F
06DE:  RLCF   2E,F
06E0:  MOVF   2A,W
06E2:  SUBWF  2B,F
06E4:  BC    06F4
06E6:  MOVLW  01
06E8:  SUBWF  2C,F
06EA:  BC    06F4
06EC:  SUBWF  2D,F
06EE:  BC    06F4
06F0:  SUBWF  2E,F
06F2:  BNC   0728
06F4:  MOVF   29,W
06F6:  SUBWF  2C,F
06F8:  BC    0704
06FA:  MOVLW  01
06FC:  SUBWF  2D,F
06FE:  BC    0704
0700:  SUBWF  2E,F
0702:  BNC   0728
0704:  MOVF   28,W
0706:  IORLW  80
0708:  SUBWF  2D,F
070A:  BC    0712
070C:  MOVLW  01
070E:  SUBWF  2E,F
0710:  BNC   0728
0712:  INCF   03,F
0714:  BNZ   0728
0716:  INCF   02,F
0718:  BNZ   0728
071A:  INCF   01,F
071C:  BNZ   0728
071E:  INCF   00,F
0720:  BZ    073C
0722:  RRCF   01,F
0724:  RRCF   02,F
0726:  RRCF   03,F
0728:  MOVFF  24,2F
072C:  MOVF   28,W
072E:  XORWF  2F,F
0730:  BTFSS  2F.7
0732:  BRA    0738
0734:  BSF    01.7
0736:  BRA    0744
0738:  BCF    01.7
073A:  BRA    0744
073C:  CLRF   00
073E:  CLRF   01
0740:  CLRF   02
0742:  CLRF   03
0744:  GOTO   0C8C (RETURN)
0748:  MOVF   30,W
074A:  SUBLW  B6
074C:  MOVWF  30
074E:  CLRF   03
0750:  MOVFF  31,34
0754:  BSF    31.7
0756:  BCF    FD8.0
0758:  RRCF   31,F
075A:  RRCF   32,F
075C:  RRCF   33,F
075E:  RRCF   03,F
0760:  RRCF   02,F
0762:  RRCF   01,F
0764:  RRCF   00,F
0766:  DECFSZ 30,F
0768:  BRA    0756
076A:  BTFSS  34.7
076C:  BRA    0784
076E:  COMF   00,F
0770:  COMF   01,F
0772:  COMF   02,F
0774:  COMF   03,F
0776:  INCF   00,F
0778:  BTFSC  FD8.2
077A:  INCF   01,F
077C:  BTFSC  FD8.2
077E:  INCF   02,F
0780:  BTFSC  FD8.2
0782:  INCF   03,F
0784:  GOTO   0864 (RETURN)
0788:  BTFSC  FD8.1
078A:  BRA    0792
078C:  CLRF   FEA
078E:  MOVLW  38
0790:  MOVWF  FE9
0792:  CLRF   00
0794:  CLRF   01
0796:  CLRF   02
0798:  CLRF   03
079A:  CLRF   38
079C:  CLRF   39
079E:  CLRF   3A
07A0:  CLRF   3B
07A2:  MOVF   37,W
07A4:  IORWF  36,W
07A6:  IORWF  35,W
07A8:  IORWF  34,W
07AA:  BZ    0804
07AC:  MOVLW  20
07AE:  MOVWF  3C
07B0:  BCF    FD8.0
07B2:  RLCF   30,F
07B4:  RLCF   31,F
07B6:  RLCF   32,F
07B8:  RLCF   33,F
07BA:  RLCF   38,F
07BC:  RLCF   39,F
07BE:  RLCF   3A,F
07C0:  RLCF   3B,F
07C2:  MOVF   37,W
07C4:  SUBWF  3B,W
07C6:  BNZ   07D8
07C8:  MOVF   36,W
07CA:  SUBWF  3A,W
07CC:  BNZ   07D8
07CE:  MOVF   35,W
07D0:  SUBWF  39,W
07D2:  BNZ   07D8
07D4:  MOVF   34,W
07D6:  SUBWF  38,W
07D8:  BNC   07F8
07DA:  MOVF   34,W
07DC:  SUBWF  38,F
07DE:  MOVF   35,W
07E0:  BTFSS  FD8.0
07E2:  INCFSZ 35,W
07E4:  SUBWF  39,F
07E6:  MOVF   36,W
07E8:  BTFSS  FD8.0
07EA:  INCFSZ 36,W
07EC:  SUBWF  3A,F
07EE:  MOVF   37,W
07F0:  BTFSS  FD8.0
07F2:  INCFSZ 37,W
07F4:  SUBWF  3B,F
07F6:  BSF    FD8.0
07F8:  RLCF   00,F
07FA:  RLCF   01,F
07FC:  RLCF   02,F
07FE:  RLCF   03,F
0800:  DECFSZ 3C,F
0802:  BRA    07B0
0804:  MOVFF  38,FEF
0808:  MOVFF  39,FEC
080C:  MOVFF  3A,FEC
0810:  MOVFF  3B,FEC
0814:  RETURN 0
0816:  MOVF   FE9,W
0818:  MOVWF  28
081A:  MOVF   27,W
081C:  MOVWF  2A
081E:  BZ    0852
0820:  MOVFF  26,33
0824:  MOVFF  25,32
0828:  MOVFF  24,31
082C:  MOVFF  23,30
0830:  CLRF   37
0832:  CLRF   36
0834:  MOVLW  20
0836:  MOVWF  35
0838:  MOVLW  82
083A:  MOVWF  34
083C:  RCALL  01E0
083E:  MOVFF  03,26
0842:  MOVFF  02,25
0846:  MOVFF  01,24
084A:  MOVFF  00,23
084E:  DECFSZ 2A,F
0850:  BRA    0820
0852:  MOVFF  26,33
0856:  MOVFF  25,32
085A:  MOVFF  24,31
085E:  MOVFF  23,30
0862:  BRA    0748
0864:  MOVFF  03,26
0868:  MOVFF  02,25
086C:  MOVFF  01,24
0870:  MOVFF  00,23
0874:  BTFSS  26.7
0876:  BRA    0892
0878:  DECF   28,F
087A:  BSF    28.5
087C:  COMF   23,F
087E:  COMF   24,F
0880:  COMF   25,F
0882:  COMF   26,F
0884:  INCF   23,F
0886:  BTFSC  FD8.2
0888:  INCF   24,F
088A:  BTFSC  FD8.2
088C:  INCF   25,F
088E:  BTFSC  FD8.2
0890:  INCF   26,F
0892:  MOVLW  3B
0894:  MOVWF  2F
0896:  MOVLW  9A
0898:  MOVWF  2E
089A:  MOVLW  CA
089C:  MOVWF  2D
089E:  CLRF   2C
08A0:  MOVLW  0A
08A2:  MOVWF  2A
08A4:  MOVF   27,W
08A6:  BTFSC  FD8.2
08A8:  INCF   28,F
08AA:  BSF    FD8.1
08AC:  CLRF   FEA
08AE:  MOVLW  23
08B0:  MOVWF  FE9
08B2:  MOVFF  26,33
08B6:  MOVFF  25,32
08BA:  MOVFF  24,31
08BE:  MOVFF  23,30
08C2:  MOVFF  2F,37
08C6:  MOVFF  2E,36
08CA:  MOVFF  2D,35
08CE:  MOVFF  2C,34
08D2:  RCALL  0788
08D4:  MOVF   01,W
08D6:  MOVF   00,F
08D8:  BNZ   08F8
08DA:  INCF   27,W
08DC:  SUBWF  2A,W
08DE:  BZ    08F8
08E0:  MOVF   28,W
08E2:  BZ    08FC
08E4:  ANDLW  0F
08E6:  SUBWF  2A,W
08E8:  BZ    08EC
08EA:  BC    0962
08EC:  BTFSC  28.7
08EE:  BRA    0962
08F0:  BTFSC  28.6
08F2:  BRA    08FC
08F4:  MOVLW  20
08F6:  BRA    0958
08F8:  MOVLW  20
08FA:  ANDWF  28,F
08FC:  BTFSS  28.5
08FE:  BRA    091A
0900:  BCF    28.5
0902:  MOVF   27,W
0904:  BTFSS  FD8.2
0906:  DECF   28,F
0908:  MOVF   00,W
090A:  MOVWF  28
090C:  MOVLW  2D
090E:  BTFSS  F9E.4
0910:  BRA    090E
0912:  MOVWF  FAD
0914:  MOVF   28,W
0916:  MOVWF  00
0918:  CLRF   28
091A:  MOVF   27,W
091C:  SUBWF  2A,W
091E:  BNZ   0936
0920:  MOVF   00,W
0922:  MOVWF  28
0924:  MOVLW  2E
0926:  BTFSS  F9E.4
0928:  BRA    0926
092A:  MOVWF  FAD
092C:  MOVF   28,W
092E:  MOVWF  00
0930:  MOVLW  20
0932:  ANDWF  28,F
0934:  MOVLW  00
0936:  MOVLW  30
0938:  BTFSS  28.5
093A:  BRA    0958
093C:  BCF    28.5
093E:  MOVF   27,W
0940:  BTFSS  FD8.2
0942:  DECF   28,F
0944:  MOVF   00,W
0946:  MOVWF  28
0948:  MOVLW  2D
094A:  BTFSS  F9E.4
094C:  BRA    094A
094E:  MOVWF  FAD
0950:  MOVF   28,W
0952:  MOVWF  00
0954:  CLRF   28
0956:  MOVLW  30
0958:  ADDWF  00,F
095A:  MOVF   00,W
095C:  BTFSS  F9E.4
095E:  BRA    095C
0960:  MOVWF  FAD
0962:  BCF    FD8.1
0964:  MOVFF  2F,33
0968:  MOVFF  2E,32
096C:  MOVFF  2D,31
0970:  MOVFF  2C,30
0974:  CLRF   37
0976:  CLRF   36
0978:  CLRF   35
097A:  MOVLW  0A
097C:  MOVWF  34
097E:  RCALL  0788
0980:  MOVFF  03,2F
0984:  MOVFF  02,2E
0988:  MOVFF  01,2D
098C:  MOVFF  00,2C
0990:  DECFSZ 2A,F
0992:  BRA    08AA
0994:  GOTO   0CB6 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses xt, nowdt, noprotect, put, CPUDIV1 
.................... // Numero de bits a utilizar sobre el convertidor analogo 
.................... #device adc = 10 
.................... #use delay(internal = 8000000) 
*
00C6:  CLRF   FEA
00C8:  MOVLW  3E
00CA:  MOVWF  FE9
00CC:  MOVF   FEF,W
00CE:  BZ    00EA
00D0:  MOVLW  02
00D2:  MOVWF  01
00D4:  CLRF   00
00D6:  DECFSZ 00,F
00D8:  BRA    00D6
00DA:  DECFSZ 01,F
00DC:  BRA    00D4
00DE:  MOVLW  97
00E0:  MOVWF  00
00E2:  DECFSZ 00,F
00E4:  BRA    00E2
00E6:  DECFSZ FEF,F
00E8:  BRA    00D0
00EA:  RETURN 0
*
0998:  MOVLW  09
099A:  SUBWF  24,F
099C:  BNC   09B4
099E:  CLRF   FEA
09A0:  MOVLW  24
09A2:  MOVWF  FE9
09A4:  BCF    FD8.0
09A6:  RRCF   FEF,F
09A8:  MOVF   FEF,W
09AA:  BZ    09B4
09AC:  BRA    09B0
09AE:  NOP   
09B0:  DECFSZ FEF,F
09B2:  BRA    09AE
09B4:  RETURN 0
.................... #use rs232(baud = 9600, bits = 8, parity = N, xmit = PIN_C6, RCV = PIN_C7, stop=1, ERRORS) 
*
0142:  BTFSS  F9E.5
0144:  BRA    0142
0146:  MOVFF  FAB,17
014A:  MOVFF  FAE,01
014E:  BTFSS  17.1
0150:  BRA    0156
0152:  BCF    FAB.4
0154:  BSF    FAB.4
0156:  GOTO   0160 (RETURN)
....................  
.................... #use fast_io(b) 
.................... #use fast_io(a) 
.................... #use fast_io(c) 
.................... // ****************  Variables Globales  ******************* 
....................  
.................... // calculo de la resulucion en la salida 
.................... float resolucion = (float) 5 / (float) 1023; 
.................... char dato_recibido = '0'; 
.................... // se usa en los bucles 
.................... int i; 
.................... // se calcula el promedio del peso 
.................... float promedio = 0.0f; 
....................  
.................... boolean primera_etapa = false; 
.................... boolean segunda_etapa = false; 
....................  
....................  
.................... // Se define el puerto ADC a utilizar y sus pines. 
.................... void define_puertos() { 
....................  
....................     /* Define el pin 7 y 0 como entrada y el resto del puerto como salidas 
....................     3 y 4 leds indicadores de caja 
....................     0  entrada finales de carrera 
....................     2 banda 1 
....................     bin: 1110 0001 
....................     */ 
....................      
....................     set_tris_b(0xE1); 
*
017C:  MOVLW  E1
017E:  MOVWF  F93
....................     output_low(PIN_B1); 
0180:  BCF    F8A.1
....................  
....................     // define la entrada 0 del puerto a como entrada 
....................     //bin: 0000 0001 
....................     set_tris_a(0x01); 
0182:  MOVLW  01
0184:  MOVWF  F92
....................     output_high(PIN_A5); 
0186:  BSF    F89.5
....................     output_low(PIN_A3); 
0188:  BCF    F89.3
....................  
....................     // se define el puerto c como salida 
....................     set_tris_c(0x00); 
018A:  MOVLW  00
018C:  MOVWF  F94
....................     output_c(0x00); 
018E:  CLRF   F8B
....................  
....................     // Define como entradas analoga el puerto AN0 
....................     SETUP_ADC_PORTS(AN0); 
0190:  MOVF   FC1,W
0192:  ANDLW  C0
0194:  IORLW  0E
0196:  MOVWF  FC1
....................  
....................     // Define el relog interno para el uso del ADC 
....................     SETUP_ADC(ADC_CLOCK_INTERNAL); 
0198:  MOVF   FC0,W
019A:  ANDLW  C0
019C:  IORLW  07
019E:  MOVWF  FC0
01A0:  BSF    FC0.7
01A2:  BSF    FC2.0
01A4:  GOTO   0B7E (RETURN)
.................... } 
.................... void parar_planta(){ 
....................        output_high(PIN_B1); 
*
00EC:  BSF    F8A.1
....................  
....................        // *************  detiene lo que esta funcionando  
....................       // if(primera_etapa){ 
....................           // se detiene la banda 1 
....................            output_low(PIN_B2); 
00EE:  BCF    F8A.2
....................       // }else{ 
....................           // se detiene las bandas finales 
....................           output_high(PIN_A5); 
00F0:  BSF    F89.5
....................      //  } 
....................  
....................       while(!input(PIN_B5)){ 
00F2:  BTFSC  F81.5
00F4:  BRA    00FE
....................          delay_ms(100); 
00F6:  MOVLW  64
00F8:  MOVWF  3E
00FA:  RCALL  00C6
00FC:  BRA    00F2
....................       } 
....................  
....................          if(primera_etapa){ 
00FE:  BTFSS  22.0
0100:  BRA    0106
....................           // se reanuda la primera banda 
....................            output_high(PIN_B2); 
0102:  BSF    F8A.2
....................        }else{ 
0104:  BRA    011C
....................           // se reanuda las bandas finales 
....................               if(input(PIN_B0)){ 
0106:  BTFSS  F81.0
0108:  BRA    011C
....................                  // esta en las bandas 
....................             output_low(PIN_A5); 
010A:  BCF    F89.5
....................             delay_ms(3500); 
010C:  MOVLW  0E
010E:  MOVWF  3D
0110:  MOVLW  FA
0112:  MOVWF  3E
0114:  RCALL  00C6
0116:  DECFSZ 3D,F
0118:  BRA    0110
....................             output_high(PIN_A5); 
011A:  BSF    F89.5
....................               } 
....................        } 
....................  
....................          output_low(PIN_B1); 
011C:  BCF    F8A.1
011E:  RETURN 0
.................... } 
....................  
.................... // ************************* interupciones ************************ 
.................... // iterupcion de cambio en el puerto b 
.................... #int_rb 
.................... void int_rb_pulsadores(){ 
....................    //boton de rest 
....................    if(input(PIN_B7)){ 
0120:  BTFSS  F81.7
0122:  BRA    012E
....................       printf("7.0000"); 
0124:  MOVLW  3A
0126:  MOVWF  FF6
0128:  MOVLW  01
012A:  MOVWF  FF7
012C:  BRA    00A2
....................    } 
....................    // stop 6 
....................    if(input(PIN_B6)){ 
012E:  BTFSS  F81.6
0130:  BRA    0134
....................          parar_planta(); 
0132:  RCALL  00EC
....................    } 
.................... } 
....................  
.................... //interrupcion de llegada de datos 
0134:  BCF    FF2.0
0136:  GOTO   0060
.................... #int_rda 
.................... void rb_isr() { 
....................     if (kbhit()) { 
*
015A:  BTFSS  F9E.5
015C:  BRA    0176
....................         dato_recibido = getc(); 
015E:  BRA    0142
0160:  MOVFF  01,1C
....................         delay_ms(4); 
0164:  MOVLW  04
0166:  MOVWF  3E
0168:  RCALL  00C6
....................         if(dato_recibido == '1'){ 
016A:  MOVF   1C,W
016C:  SUBLW  31
016E:  BNZ   0172
....................            parar_planta(); 
0170:  RCALL  00EC
....................         } 
....................         dato_recibido = '0'; 
0172:  MOVLW  30
0174:  MOVWF  1C
....................     } 
0176:  BCF    F9E.5
0178:  GOTO   0060
.................... } 
....................  
.................... float leerADC() { 
....................     return resolucion * (float)(READ_ADC()); 
*
02D2:  BSF    FC2.1
02D4:  BTFSC  FC2.1
02D6:  BRA    02D4
02D8:  MOVFF  FC4,03
02DC:  MOVFF  FC3,23
02E0:  MOVFF  FC4,24
02E4:  BRA    01A8
02E6:  MOVFF  1B,33
02EA:  MOVFF  1A,32
02EE:  MOVFF  19,31
02F2:  MOVFF  18,30
02F6:  MOVFF  03,37
02FA:  MOVFF  02,36
02FE:  MOVFF  01,35
0302:  MOVFF  00,34
0306:  RCALL  01E0
0308:  RETURN 0
.................... } 
....................  
.................... void subir_ascensor() { 
....................     //subir ascensor 
....................     output_high(PIN_A1); 
*
09B6:  BSF    F89.1
....................     output_low(PIN_A2); 
09B8:  BCF    F89.2
....................  
....................     //inicio de la subida con fuerza 
....................     for (i = 0; i < 40; i++) { 
09BA:  CLRF   1D
09BC:  MOVF   1D,W
09BE:  SUBLW  27
09C0:  BNC   09F2
....................         output_high(PIN_A3); 
09C2:  BSF    F89.3
09C4:  CLRF   16
09C6:  BTFSC  FF2.7
09C8:  BSF    16.7
09CA:  BCF    FF2.7
....................         delay_ms(9); 
09CC:  MOVLW  09
09CE:  MOVWF  3E
09D0:  CALL   00C6
09D4:  BTFSC  16.7
09D6:  BSF    FF2.7
....................         output_low(PIN_A3); 
09D8:  BCF    F89.3
09DA:  CLRF   16
09DC:  BTFSC  FF2.7
09DE:  BSF    16.7
09E0:  BCF    FF2.7
....................         delay_ms(11); 
09E2:  MOVLW  0B
09E4:  MOVWF  3E
09E6:  CALL   00C6
09EA:  BTFSC  16.7
09EC:  BSF    FF2.7
09EE:  INCF   1D,F
09F0:  BRA    09BC
....................     } 
....................  
....................     if (promedio >= 3.5) { 
09F2:  CLRF   2A
09F4:  CLRF   29
09F6:  MOVLW  60
09F8:  MOVWF  28
09FA:  MOVLW  80
09FC:  MOVWF  27
09FE:  MOVFF  21,2E
0A02:  MOVFF  20,2D
0A06:  MOVFF  1F,2C
0A0A:  MOVFF  1E,2B
0A0E:  RCALL  030A
0A10:  BC    0A14
0A12:  BNZ   0A48
....................         //cajas pesadas 
....................         while (!input(PIN_B0)) { 
0A14:  BTFSC  F81.0
0A16:  BRA    0A46
....................             output_high(PIN_A3); 
0A18:  BSF    F89.3
0A1A:  CLRF   16
0A1C:  BTFSC  FF2.7
0A1E:  BSF    16.7
0A20:  BCF    FF2.7
....................             delay_ms(8); 
0A22:  MOVLW  08
0A24:  MOVWF  3E
0A26:  CALL   00C6
0A2A:  BTFSC  16.7
0A2C:  BSF    FF2.7
....................             output_low(PIN_A3); 
0A2E:  BCF    F89.3
0A30:  CLRF   16
0A32:  BTFSC  FF2.7
0A34:  BSF    16.7
0A36:  BCF    FF2.7
....................             delay_ms(12); 
0A38:  MOVLW  0C
0A3A:  MOVWF  3E
0A3C:  CALL   00C6
0A40:  BTFSC  16.7
0A42:  BSF    FF2.7
0A44:  BRA    0A14
....................         } 
....................     } else { 
0A46:  BRA    0A7A
....................         //cajas livianas 
....................         while (!input(PIN_B0)) { 
0A48:  BTFSC  F81.0
0A4A:  BRA    0A7A
....................             output_high(PIN_A3); 
0A4C:  BSF    F89.3
0A4E:  CLRF   16
0A50:  BTFSC  FF2.7
0A52:  BSF    16.7
0A54:  BCF    FF2.7
....................             delay_ms(6); 
0A56:  MOVLW  06
0A58:  MOVWF  3E
0A5A:  CALL   00C6
0A5E:  BTFSC  16.7
0A60:  BSF    FF2.7
....................             output_low(PIN_A3); 
0A62:  BCF    F89.3
0A64:  CLRF   16
0A66:  BTFSC  FF2.7
0A68:  BSF    16.7
0A6A:  BCF    FF2.7
....................             delay_ms(14); 
0A6C:  MOVLW  0E
0A6E:  MOVWF  3E
0A70:  CALL   00C6
0A74:  BTFSC  16.7
0A76:  BSF    FF2.7
0A78:  BRA    0A48
....................         } 
....................     } 
0A7A:  GOTO   0DB6 (RETURN)
.................... } 
....................  
.................... void bajar_ascensor() { 
....................  
....................     // bajar ascensor 
....................     output_low(PIN_A1); 
0A7E:  BCF    F89.1
....................     output_high(PIN_A2); 
0A80:  BSF    F89.2
....................  
....................     for (i = 0; i < 40; i++) { 
0A82:  CLRF   1D
0A84:  MOVF   1D,W
0A86:  SUBLW  27
0A88:  BNC   0ABA
....................         output_high(PIN_A3); 
0A8A:  BSF    F89.3
0A8C:  CLRF   16
0A8E:  BTFSC  FF2.7
0A90:  BSF    16.7
0A92:  BCF    FF2.7
....................         delay_ms(12); 
0A94:  MOVLW  0C
0A96:  MOVWF  3E
0A98:  CALL   00C6
0A9C:  BTFSC  16.7
0A9E:  BSF    FF2.7
....................         output_low(PIN_A3); 
0AA0:  BCF    F89.3
0AA2:  CLRF   16
0AA4:  BTFSC  FF2.7
0AA6:  BSF    16.7
0AA8:  BCF    FF2.7
....................         delay_ms(8); 
0AAA:  MOVLW  08
0AAC:  MOVWF  3E
0AAE:  CALL   00C6
0AB2:  BTFSC  16.7
0AB4:  BSF    FF2.7
0AB6:  INCF   1D,F
0AB8:  BRA    0A84
....................     } 
....................  
....................     for (i = 0; i < 80; i++) { 
0ABA:  CLRF   1D
0ABC:  MOVF   1D,W
0ABE:  SUBLW  4F
0AC0:  BNC   0AF2
....................         output_high(PIN_A3); 
0AC2:  BSF    F89.3
0AC4:  CLRF   16
0AC6:  BTFSC  FF2.7
0AC8:  BSF    16.7
0ACA:  BCF    FF2.7
....................         delay_ms(5); 
0ACC:  MOVLW  05
0ACE:  MOVWF  3E
0AD0:  CALL   00C6
0AD4:  BTFSC  16.7
0AD6:  BSF    FF2.7
....................         output_low(PIN_A3); 
0AD8:  BCF    F89.3
0ADA:  CLRF   16
0ADC:  BTFSC  FF2.7
0ADE:  BSF    16.7
0AE0:  BCF    FF2.7
....................         delay_ms(15); 
0AE2:  MOVLW  0F
0AE4:  MOVWF  3E
0AE6:  CALL   00C6
0AEA:  BTFSC  16.7
0AEC:  BSF    FF2.7
0AEE:  INCF   1D,F
0AF0:  BRA    0ABC
....................     } 
....................  
....................     while (!input(PIN_B0)) { 
0AF2:  BTFSC  F81.0
0AF4:  BRA    0B24
....................         output_high(PIN_A3); 
0AF6:  BSF    F89.3
0AF8:  CLRF   16
0AFA:  BTFSC  FF2.7
0AFC:  BSF    16.7
0AFE:  BCF    FF2.7
....................         delay_ms(3); 
0B00:  MOVLW  03
0B02:  MOVWF  3E
0B04:  CALL   00C6
0B08:  BTFSC  16.7
0B0A:  BSF    FF2.7
....................         output_low(PIN_A3); 
0B0C:  BCF    F89.3
0B0E:  CLRF   16
0B10:  BTFSC  FF2.7
0B12:  BSF    16.7
0B14:  BCF    FF2.7
....................         delay_ms(17); 
0B16:  MOVLW  11
0B18:  MOVWF  3E
0B1A:  CALL   00C6
0B1E:  BTFSC  16.7
0B20:  BSF    FF2.7
0B22:  BRA    0AF2
....................     } 
0B24:  GOTO   0F42 (RETURN)
.................... } 
....................  
.................... void main() { 
0B28:  CLRF   FF8
0B2A:  BCF    FD0.7
0B2C:  BSF    07.7
0B2E:  MOVLW  70
0B30:  MOVWF  FD3
0B32:  MOVF   FD3,W
0B34:  CLRF   17
0B36:  BCF    FB8.3
0B38:  MOVLW  0C
0B3A:  MOVWF  FAF
0B3C:  MOVLW  A2
0B3E:  MOVWF  FAC
0B40:  MOVLW  90
0B42:  MOVWF  FAB
0B44:  MOVLW  0A
0B46:  MOVWF  1B
0B48:  MOVLW  28
0B4A:  MOVWF  1A
0B4C:  MOVLW  20
0B4E:  MOVWF  19
0B50:  MOVLW  77
0B52:  MOVWF  18
0B54:  MOVLW  30
0B56:  MOVWF  1C
0B58:  CLRF   21
0B5A:  CLRF   20
0B5C:  CLRF   1F
0B5E:  CLRF   1E
0B60:  BCF    22.0
0B62:  BCF    22.1
0B64:  MOVF   FC1,W
0B66:  ANDLW  C0
0B68:  IORLW  0F
0B6A:  MOVWF  FC1
0B6C:  MOVLW  07
0B6E:  MOVWF  FB4
....................     //habilita las interrupciones por serial 
....................     enable_interrupts(int_rda); 
0B70:  BSF    F9D.5
....................     //habilita las interrupciones puerto b 
....................     enable_interrupts(int_rb); 
0B72:  BSF    FF2.3
....................      
....................      
....................     enable_interrupts(global); 
0B74:  MOVLW  C0
0B76:  IORWF  FF2,F
....................      
....................     //flanco de subida 
....................     ext_int_edge(L_TO_H); 
0B78:  BSF    FF1.6
....................      
....................     // configura los puertos 
....................     define_puertos(); 
0B7A:  GOTO   017C
....................  
....................     // se configura el canal del adc 
....................     SET_ADC_CHANNEL(0); 
0B7E:  MOVLW  00
0B80:  MOVWF  01
0B82:  MOVF   FC2,W
0B84:  ANDLW  C3
0B86:  IORWF  01,W
0B88:  MOVWF  FC2
....................  
....................     while (true) { 
....................  
....................        primera_etapa = true; 
0B8A:  BSF    22.0
....................  
....................         // inicia la banda 1 
....................         output_high(PIN_B2); 
0B8C:  BSF    F8A.2
....................          
....................               
....................         
....................        // se apagan los led indicadores de caja 
....................         output_low(PIN_B3); 
0B8E:  BCF    F8A.3
....................         output_low(PIN_B4); 
0B90:  BCF    F8A.4
0B92:  CLRF   16
0B94:  BTFSC  FF2.7
0B96:  BSF    16.7
0B98:  BCF    FF2.7
....................  
....................         // esta en este metodo hasta que pese algo 
....................         while (true) { 
....................             delay_ms(200); 
0B9A:  MOVLW  C8
0B9C:  MOVWF  3E
0B9E:  CALL   00C6
0BA2:  BTFSC  16.7
0BA4:  BSF    FF2.7
....................             if (leerADC() > 1.0f) { 
0BA6:  CALL   02D2
0BAA:  MOVFF  03,26
0BAE:  MOVFF  02,25
0BB2:  MOVFF  01,24
0BB6:  MOVFF  00,23
0BBA:  CLRF   2A
0BBC:  CLRF   29
0BBE:  CLRF   28
0BC0:  MOVLW  7F
0BC2:  MOVWF  27
0BC4:  MOVFF  03,2E
0BC8:  MOVFF  02,2D
0BCC:  MOVFF  01,2C
0BD0:  MOVFF  00,2B
0BD4:  CALL   030A
0BD8:  BNC   0BDC
....................                 break; 
0BDA:  BRA    0BDE
....................             } 
0BDC:  BRA    0B92
....................         } 
....................  
....................         // se detiene la banda 1 
....................         output_low(PIN_B2); 
0BDE:  BCF    F8A.2
....................  
....................         // espera 3s mientras cuadra la caja 
....................         delay_ms(3000); 
0BE0:  MOVLW  0C
0BE2:  MOVWF  23
0BE4:  CLRF   16
0BE6:  BTFSC  FF2.7
0BE8:  BSF    16.7
0BEA:  BCF    FF2.7
0BEC:  MOVLW  FA
0BEE:  MOVWF  3E
0BF0:  CALL   00C6
0BF4:  BTFSC  16.7
0BF6:  BSF    FF2.7
0BF8:  DECFSZ 23,F
0BFA:  BRA    0BE4
....................  
....................         // ******************* peso de la caja 
....................  
....................         for (i = 0; i < 7; i++) { 
0BFC:  CLRF   1D
0BFE:  MOVF   1D,W
0C00:  SUBLW  06
0C02:  BNC   0C6E
....................             delay_ms(300); 
0C04:  MOVLW  02
0C06:  MOVWF  23
0C08:  CLRF   16
0C0A:  BTFSC  FF2.7
0C0C:  BSF    16.7
0C0E:  BCF    FF2.7
0C10:  MOVLW  96
0C12:  MOVWF  3E
0C14:  CALL   00C6
0C18:  BTFSC  16.7
0C1A:  BSF    FF2.7
0C1C:  DECFSZ 23,F
0C1E:  BRA    0C08
....................             promedio += leerADC(); 
0C20:  CALL   02D2
0C24:  MOVFF  FEA,24
0C28:  MOVFF  FE9,23
0C2C:  BCF    FD8.1
0C2E:  MOVFF  21,28
0C32:  MOVFF  20,27
0C36:  MOVFF  1F,26
0C3A:  MOVFF  1E,25
0C3E:  MOVFF  03,2C
0C42:  MOVFF  02,2B
0C46:  MOVFF  01,2A
0C4A:  MOVFF  00,29
0C4E:  GOTO   0380
0C52:  MOVFF  24,FEA
0C56:  MOVFF  23,FE9
0C5A:  MOVFF  03,21
0C5E:  MOVFF  02,20
0C62:  MOVFF  01,1F
0C66:  MOVFF  00,1E
0C6A:  INCF   1D,F
0C6C:  BRA    0BFE
....................         } 
....................         promedio /= 7; 
0C6E:  MOVFF  21,26
0C72:  MOVFF  20,25
0C76:  MOVFF  1F,24
0C7A:  MOVFF  1E,23
0C7E:  CLRF   2A
0C80:  CLRF   29
0C82:  MOVLW  60
0C84:  MOVWF  28
0C86:  MOVLW  81
0C88:  MOVWF  27
0C8A:  BRA    05EC
0C8C:  MOVFF  03,21
0C90:  MOVFF  02,20
0C94:  MOVFF  01,1F
0C98:  MOVFF  00,1E
....................  
....................  
....................         // se envia el peso por r232 
....................         printf("%1.4f", promedio); 
0C9C:  MOVLW  89
0C9E:  MOVWF  FE9
0CA0:  MOVFF  21,26
0CA4:  MOVFF  20,25
0CA8:  MOVFF  1F,24
0CAC:  MOVFF  1E,23
0CB0:  MOVLW  04
0CB2:  MOVWF  27
0CB4:  BRA    0816
....................  
....................         // enciende los led indicadores  
....................         if (promedio >= 3.5) { 
0CB6:  CLRF   2A
0CB8:  CLRF   29
0CBA:  MOVLW  60
0CBC:  MOVWF  28
0CBE:  MOVLW  80
0CC0:  MOVWF  27
0CC2:  MOVFF  21,2E
0CC6:  MOVFF  20,2D
0CCA:  MOVFF  1F,2C
0CCE:  MOVFF  1E,2B
0CD2:  CALL   030A
0CD6:  BC    0CDA
0CD8:  BNZ   0CDE
....................             output_high(PIN_B3); 
0CDA:  BSF    F8A.3
....................         }else{ 
0CDC:  BRA    0CE0
....................             output_high(PIN_B4); 
0CDE:  BSF    F8A.4
....................         } 
....................          
....................  
....................         //**************** servo 1 (pasa a la otra banda) *************** 
....................         delay_ms(500); 
0CE0:  MOVLW  02
0CE2:  MOVWF  23
0CE4:  CLRF   16
0CE6:  BTFSC  FF2.7
0CE8:  BSF    16.7
0CEA:  BCF    FF2.7
0CEC:  MOVLW  FA
0CEE:  MOVWF  3E
0CF0:  CALL   00C6
0CF4:  BTFSC  16.7
0CF6:  BSF    FF2.7
0CF8:  DECFSZ 23,F
0CFA:  BRA    0CE4
....................  
....................         // brazo 90 grados 
....................         for (i = 0; i < 15; i++) { 
0CFC:  CLRF   1D
0CFE:  MOVF   1D,W
0D00:  SUBLW  0E
0D02:  BNC   0D50
....................             output_high(PIN_C2); 
0D04:  BSF    F8B.2
....................             delay_us(1500); 
0D06:  CLRF   16
0D08:  BTFSC  FF2.7
0D0A:  BSF    16.7
0D0C:  BCF    FF2.7
0D0E:  MOVLW  01
0D10:  MOVWF  3E
0D12:  CALL   00C6
0D16:  BTFSC  16.7
0D18:  BSF    FF2.7
0D1A:  MOVLW  02
0D1C:  MOVWF  23
0D1E:  MOVLW  F8
0D20:  MOVWF  24
0D22:  RCALL  0998
0D24:  DECFSZ 23,F
0D26:  BRA    0D1E
....................             output_low(PIN_C2); 
0D28:  BCF    F8B.2
....................             delay_us(18500); 
0D2A:  CLRF   16
0D2C:  BTFSC  FF2.7
0D2E:  BSF    16.7
0D30:  BCF    FF2.7
0D32:  MOVLW  12
0D34:  MOVWF  3E
0D36:  CALL   00C6
0D3A:  BTFSC  16.7
0D3C:  BSF    FF2.7
0D3E:  MOVLW  02
0D40:  MOVWF  23
0D42:  MOVLW  F8
0D44:  MOVWF  24
0D46:  RCALL  0998
0D48:  DECFSZ 23,F
0D4A:  BRA    0D42
0D4C:  INCF   1D,F
0D4E:  BRA    0CFE
....................         } 
....................  
....................         for (i = 0; i < 15; i++) { 
0D50:  CLRF   1D
0D52:  MOVF   1D,W
0D54:  SUBLW  0E
0D56:  BNC   0D90
....................             output_high(PIN_C2); 
0D58:  BSF    F8B.2
....................             delay_us(500); 
0D5A:  MOVLW  02
0D5C:  MOVWF  23
0D5E:  MOVLW  F8
0D60:  MOVWF  24
0D62:  RCALL  0998
0D64:  DECFSZ 23,F
0D66:  BRA    0D5E
....................             output_low(PIN_C2); 
0D68:  BCF    F8B.2
....................             delay_us(19500); 
0D6A:  CLRF   16
0D6C:  BTFSC  FF2.7
0D6E:  BSF    16.7
0D70:  BCF    FF2.7
0D72:  MOVLW  13
0D74:  MOVWF  3E
0D76:  CALL   00C6
0D7A:  BTFSC  16.7
0D7C:  BSF    FF2.7
0D7E:  MOVLW  02
0D80:  MOVWF  23
0D82:  MOVLW  F8
0D84:  MOVWF  24
0D86:  RCALL  0998
0D88:  DECFSZ 23,F
0D8A:  BRA    0D82
0D8C:  INCF   1D,F
0D8E:  BRA    0D52
....................         } 
....................         // ***************  fin del servo 1 *****************++ 
....................  
....................         // cambia los estados de las etapas 
....................         primera_etapa = false; 
0D90:  BCF    22.0
....................         segunda_etapa = true; 
0D92:  BSF    22.1
....................  
....................  
....................         // corre las 3 bandas del rele 
....................         output_low(PIN_A5); 
0D94:  BCF    F89.5
....................         delay_ms(3500); 
0D96:  MOVLW  0E
0D98:  MOVWF  23
0D9A:  CLRF   16
0D9C:  BTFSC  FF2.7
0D9E:  BSF    16.7
0DA0:  BCF    FF2.7
0DA2:  MOVLW  FA
0DA4:  MOVWF  3E
0DA6:  CALL   00C6
0DAA:  BTFSC  16.7
0DAC:  BSF    FF2.7
0DAE:  DECFSZ 23,F
0DB0:  BRA    0D9A
....................         output_high(PIN_A5); 
0DB2:  BSF    F89.5
....................  
....................         /* 
....................         ENABLE RA3 
....................         datos: 
....................               A1 
....................               A2 
....................         */ 
....................         subir_ascensor(); 
0DB4:  BRA    09B6
....................  
....................         delay_ms(500); 
0DB6:  MOVLW  02
0DB8:  MOVWF  23
0DBA:  CLRF   16
0DBC:  BTFSC  FF2.7
0DBE:  BSF    16.7
0DC0:  BCF    FF2.7
0DC2:  MOVLW  FA
0DC4:  MOVWF  3E
0DC6:  CALL   00C6
0DCA:  BTFSC  16.7
0DCC:  BSF    FF2.7
0DCE:  DECFSZ 23,F
0DD0:  BRA    0DBA
....................  
....................         // condicional para pesar las cajas  
....................         if (promedio >= 3.5) { 
0DD2:  CLRF   2A
0DD4:  CLRF   29
0DD6:  MOVLW  60
0DD8:  MOVWF  28
0DDA:  MOVLW  80
0DDC:  MOVWF  27
0DDE:  MOVFF  21,2E
0DE2:  MOVFF  20,2D
0DE6:  MOVFF  1F,2C
0DEA:  MOVFF  1E,2B
0DEE:  CALL   030A
0DF2:  BC    0DF6
0DF4:  BNZ   0E8C
....................             // bazo cajas pesadas 
....................             for (i = 0; i < 60; i++) { 
0DF6:  CLRF   1D
0DF8:  MOVF   1D,W
0DFA:  SUBLW  3B
0DFC:  BNC   0E36
....................                 output_high(PIN_C1); 
0DFE:  BSF    F8B.1
....................                 delay_us(500); 
0E00:  MOVLW  02
0E02:  MOVWF  23
0E04:  MOVLW  F8
0E06:  MOVWF  24
0E08:  RCALL  0998
0E0A:  DECFSZ 23,F
0E0C:  BRA    0E04
....................                 output_low(PIN_C1); 
0E0E:  BCF    F8B.1
....................                 delay_us(19500); 
0E10:  CLRF   16
0E12:  BTFSC  FF2.7
0E14:  BSF    16.7
0E16:  BCF    FF2.7
0E18:  MOVLW  13
0E1A:  MOVWF  3E
0E1C:  CALL   00C6
0E20:  BTFSC  16.7
0E22:  BSF    FF2.7
0E24:  MOVLW  02
0E26:  MOVWF  23
0E28:  MOVLW  F8
0E2A:  MOVWF  24
0E2C:  RCALL  0998
0E2E:  DECFSZ 23,F
0E30:  BRA    0E28
0E32:  INCF   1D,F
0E34:  BRA    0DF8
....................             } 
....................  
....................             for (i = 0; i < 60; i++) { 
0E36:  CLRF   1D
0E38:  MOVF   1D,W
0E3A:  SUBLW  3B
0E3C:  BNC   0E8A
....................                 output_high(PIN_C1); 
0E3E:  BSF    F8B.1
....................                 delay_us(2500); 
0E40:  CLRF   16
0E42:  BTFSC  FF2.7
0E44:  BSF    16.7
0E46:  BCF    FF2.7
0E48:  MOVLW  02
0E4A:  MOVWF  3E
0E4C:  CALL   00C6
0E50:  BTFSC  16.7
0E52:  BSF    FF2.7
0E54:  MOVLW  02
0E56:  MOVWF  23
0E58:  MOVLW  F8
0E5A:  MOVWF  24
0E5C:  RCALL  0998
0E5E:  DECFSZ 23,F
0E60:  BRA    0E58
....................                 output_low(PIN_C1); 
0E62:  BCF    F8B.1
....................                 delay_us(17500); 
0E64:  CLRF   16
0E66:  BTFSC  FF2.7
0E68:  BSF    16.7
0E6A:  BCF    FF2.7
0E6C:  MOVLW  11
0E6E:  MOVWF  3E
0E70:  CALL   00C6
0E74:  BTFSC  16.7
0E76:  BSF    FF2.7
0E78:  MOVLW  02
0E7A:  MOVWF  23
0E7C:  MOVLW  F8
0E7E:  MOVWF  24
0E80:  RCALL  0998
0E82:  DECFSZ 23,F
0E84:  BRA    0E7C
0E86:  INCF   1D,F
0E88:  BRA    0E38
....................             } 
....................  
....................         } else { 
0E8A:  BRA    0F20
....................             // bazo cajas livianas 
....................             for (i = 0; i < 60; i++) { 
0E8C:  CLRF   1D
0E8E:  MOVF   1D,W
0E90:  SUBLW  3B
0E92:  BNC   0ECC
....................                 output_high(PIN_C0); 
0E94:  BSF    F8B.0
....................                 delay_us(500); 
0E96:  MOVLW  02
0E98:  MOVWF  23
0E9A:  MOVLW  F8
0E9C:  MOVWF  24
0E9E:  RCALL  0998
0EA0:  DECFSZ 23,F
0EA2:  BRA    0E9A
....................                 output_low(PIN_C0); 
0EA4:  BCF    F8B.0
....................                 delay_us(19500); 
0EA6:  CLRF   16
0EA8:  BTFSC  FF2.7
0EAA:  BSF    16.7
0EAC:  BCF    FF2.7
0EAE:  MOVLW  13
0EB0:  MOVWF  3E
0EB2:  CALL   00C6
0EB6:  BTFSC  16.7
0EB8:  BSF    FF2.7
0EBA:  MOVLW  02
0EBC:  MOVWF  23
0EBE:  MOVLW  F8
0EC0:  MOVWF  24
0EC2:  RCALL  0998
0EC4:  DECFSZ 23,F
0EC6:  BRA    0EBE
0EC8:  INCF   1D,F
0ECA:  BRA    0E8E
....................             } 
....................  
....................             for (i = 0; i < 60; i++) { 
0ECC:  CLRF   1D
0ECE:  MOVF   1D,W
0ED0:  SUBLW  3B
0ED2:  BNC   0F20
....................                 output_high(PIN_C0); 
0ED4:  BSF    F8B.0
....................                 delay_us(2500); 
0ED6:  CLRF   16
0ED8:  BTFSC  FF2.7
0EDA:  BSF    16.7
0EDC:  BCF    FF2.7
0EDE:  MOVLW  02
0EE0:  MOVWF  3E
0EE2:  CALL   00C6
0EE6:  BTFSC  16.7
0EE8:  BSF    FF2.7
0EEA:  MOVLW  02
0EEC:  MOVWF  23
0EEE:  MOVLW  F8
0EF0:  MOVWF  24
0EF2:  RCALL  0998
0EF4:  DECFSZ 23,F
0EF6:  BRA    0EEE
....................                 output_low(PIN_C0); 
0EF8:  BCF    F8B.0
....................                 delay_us(17500); 
0EFA:  CLRF   16
0EFC:  BTFSC  FF2.7
0EFE:  BSF    16.7
0F00:  BCF    FF2.7
0F02:  MOVLW  11
0F04:  MOVWF  3E
0F06:  CALL   00C6
0F0A:  BTFSC  16.7
0F0C:  BSF    FF2.7
0F0E:  MOVLW  02
0F10:  MOVWF  23
0F12:  MOVLW  F8
0F14:  MOVWF  24
0F16:  RCALL  0998
0F18:  DECFSZ 23,F
0F1A:  BRA    0F12
0F1C:  INCF   1D,F
0F1E:  BRA    0ECE
....................             } 
....................         } 
....................  
....................         // corre las 3 bandas del rele 
....................         output_low(PIN_A5); 
0F20:  BCF    F89.5
....................         delay_ms(3500); 
0F22:  MOVLW  0E
0F24:  MOVWF  23
0F26:  CLRF   16
0F28:  BTFSC  FF2.7
0F2A:  BSF    16.7
0F2C:  BCF    FF2.7
0F2E:  MOVLW  FA
0F30:  MOVWF  3E
0F32:  CALL   00C6
0F36:  BTFSC  16.7
0F38:  BSF    FF2.7
0F3A:  DECFSZ 23,F
0F3C:  BRA    0F26
....................         output_high(PIN_A5); 
0F3E:  BSF    F89.5
....................  
....................         bajar_ascensor(); 
0F40:  BRA    0A7E
....................  
....................         segunda_etapa = false; 
0F42:  BCF    22.1
0F44:  BRA    0B8A
....................     } 
.................... } 
0F46:  SLEEP 

Configuration Fuses:
   Word  1: C827   PLL12 CPUDIV1 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
